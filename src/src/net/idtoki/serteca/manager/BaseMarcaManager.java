package net.idtoki.serteca.manager;

import java.util.logging.Logger;
import net.idtoki.serteca.model.MarcaPeer;
import net.idtoki.serteca.group.MarcaGroupBean;
import net.idtoki.serteca.model.Marca;
import net.zylk.torque.SearchQuery;
import net.zylk.torque.BaseQuery;
import net.zylk.torque.TorqueUtils;
import net.zylk.torque.manager.BaseManager;
import org.apache.torque.TorqueException;
import java.util.Enumeration;



import org.apache.torque.util.Criteria;
import org.apache.torque.util.UniqueList;
import net.zylk.tools.ajax.AjaxUtils.DinamicGridBean;

/**
 * This class was autogenerated by Torque on:
 *
 * [Mon Jul 03 11:03:24 CEST 2006]
 *
 */
public abstract class BaseMarcaManager extends BaseManager
{
	protected static final Logger logger = Logger.getLogger(
	   "net.idtoki.serteca.managers.BaseMarcaManager");

	public static final Criteria buildSearchCriteria(DinamicGridBean dgb)
	{
		return BaseManager.buildSearchCriteria(dgb, new MarcaManager());
	}

	public static final Criteria buildSearchCriteria(String query, int offset, int limit)
	{
		return BaseManager.buildSearchCriteria(query, offset, limit, new MarcaManager());
	}

	public static final Criteria buildSearchCriteria(String query)
	{
		return BaseManager.buildSearchCriteria(query, new MarcaManager());
	}

	protected void addOrSearchCriteria(Criteria criteria,String campo,String valor, String condicion){
		Criteria.Criterion criterion = MarcaManager.getSearchCriterion(campo,valor, condicion);
		//Si existe ya un criterion hay que utilizarlo para añadir el or sino utilizará un and
		Enumeration enumeration =criteria.elements();
		if(enumeration.hasMoreElements()){
			Criteria.Criterion cr = (Criteria.Criterion) enumeration.nextElement();
			cr.or(criterion);
		}else{
			criteria.or(criterion);
		}
	}

	protected void addAndSearchCriteria(Criteria criteria,String campo, String valor, String condicion){
		Criteria.Criterion criterion = MarcaManager.getSearchCriterion(campo,valor, condicion);
		criteria.and(criterion);
	}

	protected static Criteria.Criterion getSearchCriterion(String campo,String valor, String condicion){
        Criteria criteria =  new Criteria();
        Criteria.Criterion criterion = null;

			if(campo.equals("all") || campo.equals(BaseManager.campoToLowerCase(MarcaPeer.ID)))
		{
			if(condicion.equals(BaseQuery.SingleQuery.EQUAL_CONDITION))
				criterion = TorqueUtils.addOrEqualCriteria(criterion,MarcaPeer.ID,valor,true);
			else if (condicion.equals(BaseQuery.SingleQuery.LIKE_CONDITION))
				criterion = TorqueUtils.addOrLikeCriteria(criterion,MarcaPeer.ID,valor,true);
			else if (condicion.equals(BaseQuery.SingleQuery.LESS_CONDITION))
				criterion = TorqueUtils.addOrLessCriteria(criterion,MarcaPeer.ID,valor,true);
			else if (condicion.equals(BaseQuery.SingleQuery.GREATER_CONDITION))
				criterion = TorqueUtils.addOrGreaterCriteria(criterion,MarcaPeer.ID,valor,true);
		}
			if(campo.equals("all") || campo.equals(BaseManager.campoToLowerCase(MarcaPeer.NOMBRE)))
		{
			if(condicion.equals(BaseQuery.SingleQuery.EQUAL_CONDITION))
				criterion = TorqueUtils.addOrEqualCriteria(criterion,MarcaPeer.NOMBRE,valor,true);
			else if (condicion.equals(BaseQuery.SingleQuery.LIKE_CONDITION))
				criterion = TorqueUtils.addOrLikeCriteria(criterion,MarcaPeer.NOMBRE,valor,true);
			else if (condicion.equals(BaseQuery.SingleQuery.LESS_CONDITION))
				criterion = TorqueUtils.addOrLessCriteria(criterion,MarcaPeer.NOMBRE,valor,true);
			else if (condicion.equals(BaseQuery.SingleQuery.GREATER_CONDITION))
				criterion = TorqueUtils.addOrGreaterCriteria(criterion,MarcaPeer.NOMBRE,valor,true);
		}
		
		return criterion;
	}

	public static final MarcaGroupBean getMarcas() {
    	return BaseMarcaManager.getMarcas(false);
	}

	public static final MarcaGroupBean getMarcas(boolean paginado) {
    	return BaseMarcaManager.getMarcas(new Criteria(), paginado,0);
	}

	public static final MarcaGroupBean getMarcas(Criteria c) {
		return BaseMarcaManager.getMarcas(c,false,0);
	}

	public static final MarcaGroupBean getMarcas(Criteria criteria,boolean paginado, int pagina) {
		MarcaGroupBean objMarcaGroupBean = new MarcaGroupBean();
		objMarcaGroupBean.setPaginaActual(pagina);
		objMarcaGroupBean.setMarcas(criteria, paginado);
		return objMarcaGroupBean;
	}

							
	public static final Marca getMarca(int id_Id) {
		Criteria c = new Criteria();
			c.add(MarcaPeer.ID, id_Id);
			return BaseMarcaManager.MarcasGroupBean2Marca(BaseMarcaManager.getMarcas(c));
	}

	public static final Marca MarcasGroupBean2Marca(MarcaGroupBean obj){
		if(obj.size() == 1)
			return obj.getMarca(0);
		else
			return null;
	}

	private static void updateMarcaAttribute(int id_Id, String valor, String campo) throws Exception
	{
		Marca obj = BaseMarcaManager.getMarca(id_Id);
			if(campo.equals(MarcaPeer.ID))
					obj.setId(Integer.parseInt(valor)); //int
					if(campo.equals(MarcaPeer.NOMBRE))
					obj.setNombre(valor); //String
					obj.save();
	}

	public static void updateId(int id_Id, String valor) throws Exception
	{
		updateMarcaAttribute(id_Id, valor, MarcaPeer.ID);
	}
	public static void updateNombre(int id_Id, String valor) throws Exception
	{
		updateMarcaAttribute(id_Id, valor, MarcaPeer.NOMBRE);
	}

			public void addJoins(Criteria criteria)
	{
	 //no tiene claves externas asi que el metodo no hace nada
	}
	

  public static void deleteMarca(int id_Id) throws TorqueException
  {
  	MarcaPeer.doDelete(MarcaManager.getMarca(id_Id));
  }

  public static Marca addUpdateMarca(Marca obj) throws TorqueException
  {
	MarcaGroupBean gb = new MarcaGroupBean();
	gb.setElemento(obj);
	gb.save();
	return obj;
  }

}

