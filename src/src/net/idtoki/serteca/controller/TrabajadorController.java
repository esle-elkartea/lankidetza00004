package net.idtoki.serteca.controller;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.ResourceBundle;
import java.util.logging.Logger;

import javax.servlet.ServletConfig;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.xml.transform.Source;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.stream.StreamSource;

import org.apache.torque.TorqueException;
import org.apache.torque.util.Criteria;

import net.idtoki.serteca.group.CategoriaGroupBean;
import net.idtoki.serteca.group.LocalidadGroupBean;
import net.idtoki.serteca.group.TrabajadorGroupBean;
import net.idtoki.serteca.helper.OrdenTrabajoHelper;
import net.idtoki.serteca.helper.TrabajadorHelper;
import net.idtoki.serteca.model.CategoriaPeer;
import net.idtoki.serteca.model.LocalidadPeer;
import net.idtoki.serteca.model.Trabajador;
import net.idtoki.serteca.model.TrabajadorPeer;
import net.idtoki.serteca.manager.CategoriaManager;
import net.idtoki.serteca.manager.LocalidadManager;
import net.idtoki.serteca.manager.TrabajadorManager;
import net.zylk.tools.ajax.AjaxUtils;
import net.zylk.tools.ajax.AjaxUtils.DinamicGridBean;
import net.zylk.tools.format.FormatUtils;
import net.zylk.tools.pdf.PdfUtils;
import net.zylk.tools.xml.XmlUtils;
import net.zylk.web.WebUtils;

/**
 * The skeleton for this class was autogenerated by Torque on:
 *
 * [Wed Feb 01 12:46:43 CET 2006]
 *
 *  You should add additional methods to this class to meet the
 *  application requirements.  This class will only be generated as
 *  long as it does not already exist in the output directory.
 */
public class TrabajadorController
    extends BaseTrabajadorController
{
 private static final Logger logger = Logger.getLogger("net.idtoki.serteca.controller.TrabajadorController");
 private TransformerFactory tFactory = TransformerFactory.newInstance();
 private Transformer trabajador_transformer = null;
 private Transformer trabajadores_transformer = null;

 public void init(ServletConfig config)
 {
  //Aqui se registran los metodos que no se quieran repetir de otros sitios.
  //por ejemplo igual quieres tener los metodos de generacion de ajax
  // en un paquete aparte y no copiarlos por aqui,  sino tenerlos disponibles
  //para todas las aplicaciones sin repetirlos en todos los sitios, pues los registras
  //y punto!!
  super.init();
  ResourceBundle resource = ResourceBundle.getBundle("net/idtoki/serteca/app/config/app-config");
  File trabajador = new File(resource.getString("app.xsl.templates.dir")+"/PdfTrabajador.xslt");
  Source xslSource = new StreamSource(trabajador);
  File trabajadores = new File(resource.getString("app.xsl.templates.dir")+"/PdfListaTrabajador.xslt");
  Source xslSourceT = new StreamSource(trabajadores);  
  try{
    trabajador_transformer = tFactory.newTransformer(xslSource);
    trabajadores_transformer = tFactory.newTransformer(xslSourceT);
  }catch (Exception e){
    e.printStackTrace();
  }   
 }
 
public void serviceAddTrabajador(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
	 utf8RequestService(request);
	 //recojo los parametros del formulario y doy de alta un nuevo cliente
	 try
	 {
		 Trabajador tr = TrabajadorHelper.createObj(request);
		 tr.setFechaAlta(FormatUtils.ddmmaaaa2aaaammdd(tr.getFechaAlta(),"-",""));
		 tr.setFechaBaja(FormatUtils.ddmmaaaa2aaaammdd(tr.getFechaBaja(),"-",""));
		 TrabajadorGroupBean tgb = new TrabajadorGroupBean();
		 tgb.setElemento(tr);
		 tgb.save();
	 }
	 catch(TorqueException te)
	 {
		 response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
	 }
 }
 
public StringBuffer replaceStringBuffer (StringBuffer strBA, String strOrigen, String strDestino) 
{
	 return new StringBuffer(strBA.toString().replaceAll(strOrigen,strDestino));
}

private Criteria ordenacion(Criteria c,String CampoOrdenacion,String OrdenOrdenacion) 
{ 
	if((OrdenOrdenacion != null )&& (OrdenOrdenacion.compareTo("ASC")==0))
		if ((CampoOrdenacion != null)) //&& (CampoOrdenacion.compareTo("nombre")==0))
		{
			//c.clear();
			c.addAscendingOrderByColumn(CampoOrdenacion.toString());
		}
	if  ((OrdenOrdenacion != null) && (OrdenOrdenacion.compareTo("DESC")==0))
		if ((CampoOrdenacion != null)) //&& (CampoOrdenacion.compareTo("nombre")==0))
			{
			//c.clear();
			c.addDescendingOrderByColumn(CampoOrdenacion.toString());
		}
	return c;
}

private Criteria filtro(Criteria c,int filtro) 
{ 
	String cadena = null;
	 switch (filtro)
	 {
	 case 1:
		  //trabajadores en activo
		  c.add(TrabajadorPeer.FECHA_BAJA,(Object)cadena,Criteria.ISNULL);
		  break;
	 case 2:
		  //esto sería para trabajadores
		  //que están de baja  
		  c.add(TrabajadorPeer.FECHA_BAJA,(Object)cadena,Criteria.ISNOTNULL);
		  break;
	 default:
		 //todos los trabajadores
		 break;
	 }
	return c;
}

private Criteria criteriaTrabajadorTableContent(HttpServletRequest request,Criteria c) throws IOException, ServletException
{
	  String paramSortCol =  WebUtils.getStringParam(request, "sort_col");
	  String paramSortDir =  WebUtils.getStringParam(request, "sort_dir");
	  int paramFiltro =  WebUtils.getintParam(request, "filtro");
	  //System.out.println("----query:"+paramQuery+"----col:"+paramSortCol+"----dir:"+paramSortDir+"----filtro:"+paramFiltro);
	  c = ordenacion(c,paramSortCol,paramSortDir);
	  c = filtro(c,paramFiltro);
	  //c.addAscendingOrderByColumn(TrabajadorPeer.NOMBRE);
	  c.addAscendingOrderByColumn(TrabajadorPeer.FECHA_ALTA);
	  return c;
}

 public void serviceTrabajadorTableContent(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
	 utf8RequestService(request);
	 int numElemPedidosBD = 40;
	 int gap = 0;//gap = viewedRows - numElemVisiblesUltPag	 
	  DinamicGridBean dgb = WebUtils.getDinamicGridBeanParam(request,numElemPedidosBD,gap);
	  Criteria c = TrabajadorManager.buildSearchCriteria(dgb);
	  c =criteriaTrabajadorTableContent(request,c);

	  TrabajadorGroupBean tgb = TrabajadorManager.getTrabajadors(c);
	  dgb.setTotalSize(tgb.getTotalSize());

	  String[] methodos= new String[] {	
			    TrabajadorHelper.CIF_GET_METHOD_NAME+"TrabajadorParsed",
				TrabajadorHelper.NOMBRE_GET_METHOD_NAME+"TrabajadorParsed",
				TrabajadorHelper.APELLIDOS_GET_METHOD_NAME+"TrabajadorParsed",
				TrabajadorHelper.TELEFONO_GET_METHOD_NAME+"TrabajadorParsed",
				TrabajadorHelper.MOVIL_GET_METHOD_NAME+"TrabajadorParsed",
				"getEditTrabajador",
				"getDeleteTrabajador"
				};
	  

	  xmlResponseService(response,AjaxUtils.buildXmlAjaxResponseTableContentFromListObj(
			  										tgb.getAlmacen(),
			  										methodos,
			  										TrabajadorHelper.ID_GET_METHOD_NAME, dgb,"ISO-8859-1"));
 }
 
 public void serviceTrabajadorElement(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
  StringBuffer cadena=null;
  Criteria c= new Criteria();
  int claveId=-1;
  claveId=WebUtils.getintParam(request, "trabajadores.ID");
  if (claveId!=-1)
  {
	  c.add(TrabajadorPeer.ID, claveId);
  }
  c.addAscendingOrderByColumn(TrabajadorPeer.ID);
  TrabajadorGroupBean trgb = TrabajadorManager.getTrabajadors(c);

  
  if (trgb.getTotalSize()!=0)
  {
	  String [] parametros={
			    TrabajadorHelper.ID_GET_METHOD_NAME,
			    TrabajadorHelper.CIF_GET_METHOD_NAME+"TrabajadorParsed",
				TrabajadorHelper.FECHA_ALTA_GET_METHOD_NAME+"TrabajadorParsed",
				TrabajadorHelper.FECHA_BAJA_GET_METHOD_NAME+"TrabajadorParsed",
				TrabajadorHelper.NOMBRE_GET_METHOD_NAME+"TrabajadorParsed",
				TrabajadorHelper.APELLIDOS_GET_METHOD_NAME+"TrabajadorParsed",
				TrabajadorHelper.APELLIDOSDOS_GET_METHOD_NAME+"TrabajadorParsed",
				TrabajadorHelper.NUMERO_GET_METHOD_NAME+"TrabajadorParsed",		
				TrabajadorHelper.CATEGORIA_ID_GET_METHOD_NAME+"TrabajadorParsed",
				TrabajadorHelper.COSTEHORA_GET_METHOD_NAME+"TrabajadorParsed",
				TrabajadorHelper.DIRECCION_GET_METHOD_NAME+"TrabajadorParsed",
				TrabajadorHelper.LOCALIDAD_ID_GET_METHOD_NAME+"TrabajadorParsed",
				TrabajadorHelper.CP_GET_METHOD_NAME+"TrabajadorParsed",
				TrabajadorHelper.TELEFONO_GET_METHOD_NAME+"TrabajadorParsed",
				TrabajadorHelper.MOVIL_GET_METHOD_NAME+"TrabajadorParsed",
				TrabajadorHelper.EMAIL_GET_METHOD_NAME+"TrabajadorParsed",
				TrabajadorHelper.OBSERVACION_GET_METHOD_NAME+"TrabajadorParsed"				 
	  			};
	  cadena=trgb.buildXml(parametros,null,"ISO-8859-1");
  }
  xmlResponseService(response, cadena);
 }
 
 
 //////PRUEBAS DE GUS NO MODIFICAR
 
 public void serviceTrabajadorPruebaTableContent(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
  DinamicGridBean dgb = WebUtils.getDinamicGridBeanParam(request,14,7);
  Criteria c = TrabajadorManager.buildSearchCriteria(dgb);
  c.addAscendingOrderByColumn(TrabajadorPeer.NOMBRE);
  //resultado de la consulta lo guardamos en un TrabajadorGroupBean
  TrabajadorGroupBean tgb = TrabajadorManager.getTrabajadors(c);
  dgb.setTotalSize(tgb.getTotalSize());
  
  String[] methodos= new String[] {	
			TrabajadorHelper.NOMBRE_GET_METHOD_NAME+"TrabajadorParsed",
			TrabajadorHelper.APELLIDOS_GET_METHOD_NAME+"TrabajadorParsed",
			TrabajadorHelper.FECHA_ALTA_GET_METHOD_NAME+"TrabajadorParsed",
			TrabajadorHelper.FECHA_BAJA_GET_METHOD_NAME+"TrabajadorParsed",
			"getNombreApellidos"
			};
  
  /*
   funcion que devuelve el xml
   */
  xmlResponseService(response,AjaxUtils.buildXmlAjaxResponseTableContentFromListObj(
		  										tgb.getAlmacen(),
		  										methodos,
		  										TrabajadorHelper.ID_GET_METHOD_NAME, dgb,"ISO-8859-1"));
 }
 
 
 
 /*Funcion que atiende a la peticion datos de trabajadores que se ajustan a un criterio establecido
   y que es enviado en un parametro por post y devuelve dichos datos en una lista
  */
 public void serviceTrabajadorUlContent(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {	 
	 utf8RequestService(request);
	 /*
	  El array methodos es tiene la misma utilidad que en la funcion anterior, determinar los campos que 
	  quiero que se muestren, el oren y el valor de dichos campos
	  Para comprobar la utilidad de esta unción en la pagina de trabajadores, cuando de de alta un
	  nuevo trabajador, cuando introduzca el apellido me mostrar una lista de apellidos-nombre de los
	  trabajadores que ya estan dados del alta. Solo tiene un fin didactico de uso de esta fucion
	  Haré que el input tenga un autocompleter.
	  */
	 String[] methodos= new String[] {
			 TrabajadorHelper.ID_GET_METHOD_NAME,
			 TrabajadorHelper.NOMBRE_GET_METHOD_NAME+"TrabajadorParsed",
			 TrabajadorHelper.APELLIDOS_GET_METHOD_NAME+"TrabajadorParsed",
			 TrabajadorHelper.APELLIDOSDOS_GET_METHOD_NAME+"TrabajadorParsed"
			 };
	 /*
	 En la variable 'param' tenemos guardado el valor que hemos enviado al servidor en el parmametro 'value'
	 ¿Que parametro es 'value'?R:El parametro enviado por post cuando introducimos una cadena
	 de caracteres en una celda de la grid que esta preparada para autocompletado     
	 */
	 String param =  WebUtils.getStringParam(request, "value");
	 
	 /*Si no hemos editado una celda de la grid  con autocompletado, el parametro value no existira
	   luego estamos introduciendo caracteres en un input preparado para autocompletado.
	   Lo primero que tendremos que saber es el nombre del parametro que se envia por post (en el request)
	   es decir, el 'name' del input que queremos que se autocomplete.
	   El valor que trae este parametro (el 'name' del input) lo guardamos en la variable 'param'.
       Podriamos poner cualquier 'name' del input pero seguimos una nomencaltura
       Cuando estamos dando de alta a un nuevo trabajador, los inputs donde introduzco los datos del
       trabajador tienen un 'name' convenido  con un formato 'Trabajadores.NOMBRECAMPO'. 
       Donde 'Trabajadores' es el nombre de la tabla de trabajadores y 'NOMBRECAMPO' es el nombre del 
       campo para el que estamos introduciendo un dato.El nombre del dampo tendrá que ser el mismo que 
       se haya definido en el esquema de la base de datos.
       EJ: INtroducir datos en el campo NOMBRE. el 'name' del input deberá ser Trabajadores.NOMBRE  
       LO que estoy recogiendo en el servidor es:
       param =  WebUtils.getStringParam(request, new TrabajadorHelper().getNombreName())
       Es decir, del request estoy cogiendo el valor de parametro 'TrabajadorHelper().getNombreName()'
       es como decir 'TrabajadorPeer.NOMBRE' que es como decir 'Trabajadores.NOMBRE' 
       que es el 'name' del input desde el que he solicitado este servicio(ealmente el que lo ha solicitado
       es el autocompleter).
	   Puede ocurrir que esta funcion sea llamada desde distintos 'inputs' incluso desde distintas paginas
	   Para contemplar los casos que se me puedan dar lo que tendremos que considerar tantos 'if' como casos
	   En el momento que 'param' tenga un valor, ya no entrará en ningun otro 'if'.
	  */
	 if(param==null || param.length() <= 0)
		 /*
		  Si el param todavía no tiene valor pruebo con otro parametro de los que controlo 
		  que puede ser enviado por post
		  */
		 param =  WebUtils.getStringParam(request, new OrdenTrabajoHelper().getResponsableIdName());
	  /*
	   En este puto vamos a obtener un groupbeanTrabajadores con el resultado de la consulta que se ajuste
	   al criterio recogido en param. Si param="" el resultado de la consuta seran todos los trabajadores
	   */

	 TrabajadorGroupBean tgb = TrabajadorManager.getTrabajadors(TrabajadorManager.buildSearchCriteria(param));
	 /*
	  funcion que devuelve la lista con el valor de los campos definidos de los trabajadores que cumplen el criterio 
	  */
	 simpleResponseService(response, AjaxUtils.buildAjaxULContentFromListObj(tgb.getAlmacen(),methodos, TrabajadorHelper.COMPLEX_ID_GET_METHOD,"Trabajador"));
 }
 

 /*
  Esta funcion sobreescribe a un metodo protegido en BaseTrabajadorController que lo que hace, en nuestro caso,
  es tomar el valor enviado en un request y darle el formato idoneo para su actualización en la base de datos
  En este caso toma la fecha en formato dia-mes-año ,  le quita los guiones y la convierte  añomesdia
  Esta funcion  es llamada por otro metodo publico serviceUpdateFechaAlta de BaseTrabajadorController.
  Para actualizar un trabajador, desde una funcion  controller(equivalentes a servlets) 
  se llama a una función Manager (conexion entre los controller y la capa model)
  que a su vez llama a una funcion de Model que hace la actualización en la base de datos
   */
 /*
 protected String updateFechaAltaRequestCallBack(String value)
 {
	return FormatUtils.ddmmaaaa2aaaammdd(value,"-","");
 }
 protected String updateFechaBajaRequestCallBack(String value)
 {
	return FormatUtils.ddmmaaaa2aaaammdd(value,"-","");
 }
 */

 
 
 /*
 Esta funcion sobreescribe a un metodo protegido en BaseTrabajadorController que lo que hace, en nuestro caso,
 es coge el valor del response y le da formato...??????
  */
 protected StringBuffer updateFechaAltaResponseCallBack(String s)
 {
	ArrayList a = AjaxUtils.splitIdFields(s);
    return new StringBuffer(TrabajadorManager.getTrabajador(
    		Integer.parseInt(a.get(0).toString())).getFechaAltaTrabajadorParsed());
 }
 protected StringBuffer updateFechaBajaResponseCallBack(String s)
 {
	 ArrayList a = AjaxUtils.splitIdFields(s);
	 return new StringBuffer(TrabajadorManager.getTrabajador(
	   	Integer.parseInt(a.get(0).toString())).getFechaBajaTrabajadorParsed());
 }
 
 protected StringBuffer updateNombreResponseCallBack(String s)
 {
	 ArrayList a = AjaxUtils.splitIdFields(s);
	 return new StringBuffer(TrabajadorManager.getTrabajador(Integer.parseInt(a.get(0).toString())).getNombreTrabajadorParsed());
 }
 
 protected StringBuffer updateTlfnoResponseCallBack(String s)
 {
	 ArrayList a = AjaxUtils.splitIdFields(s);
	 return new StringBuffer(TrabajadorManager.getTrabajador(Integer.parseInt(a.get(0).toString())).getTlfnoTrabajadorParsed());
 }
 
 protected StringBuffer updateMovilResponseCallBack(String s)
 {
	 ArrayList a = AjaxUtils.splitIdFields(s);
	 return new StringBuffer(TrabajadorManager.getTrabajador(Integer.parseInt(a.get(0).toString())).getMovilTrabajadorParsed());
 }
  
 public void serviceDeleteTrabajador(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
	 int idBorrar=-1;
	 idBorrar=WebUtils.getintParam(request, "borrarId");
	 if (idBorrar!=-1)
		 if (TrabajadorManager.borraTrabajador(idBorrar))
			 WebUtils.writeXmlResponse(response,XmlUtils.buildXmlOKResponse("ISO-8859-1"));
		 else
			 WebUtils.writeXmlResponse(response,XmlUtils.buildXmlNotOKResponse("ISO-8859-1"));			 
 }
 
 
 public void serviceTrabajadorLocalidadId(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
  String cadena=null;
  Criteria c= new Criteria();
  int claveId=-1;
  claveId=WebUtils.getintParam(request, "Localidades.ID");
  if (claveId!=-1)
  {
	  c.add(LocalidadPeer.ID, claveId);
  }
  c.addAscendingOrderByColumn(LocalidadPeer.ID);
  LocalidadGroupBean trgb = LocalidadManager.getLocalidads(c);
  
  if (trgb.getTotalSize()!=0)
  {
	  cadena = "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" ?>";
	  cadena = cadena + "<result><Trabajadores.LOCALIDAD_ID>" + trgb.getLocalidad(0).getId() + "-" + trgb.getLocalidad(0).getNombreLocalidadParsed() + "</Trabajadores.LOCALIDAD_ID></result>";
  }
  xmlResponseService(response, new StringBuffer(cadena));
 }  
 
 public void serviceTrabajadorCategoria(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
  String cadena=null;
  Criteria c= new Criteria();
  int claveId=-1;
  claveId=WebUtils.getintParam(request, "Categorias.ID");
  if (claveId!=-1)
  {
	  c.add(CategoriaPeer.ID, claveId);
  }
  c.addAscendingOrderByColumn(CategoriaPeer.ID);
  CategoriaGroupBean trgb = CategoriaManager.getCategorias(c);
  
  if (trgb.getTotalSize()!=0)
  {
	  cadena = "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" ?>";
	  cadena = cadena + "<result><Trabajadores.CATEGORIA_ID>" + trgb.getCategoria(0).getId() + "-" + trgb.getCategoria(0).getNombreCategoriaParsed() + "</Trabajadores.CATEGORIA_ID></result>";
  }
  xmlResponseService(response, new StringBuffer(cadena));
 }  
 
 public void serviceGetTrabajadorDetalleXml (HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
	 utf8RequestService(request);
	 String[] getMethodos= new String[] {
			 TrabajadorHelper.APELLIDOS_GET_METHOD_NAME+"TrabajadorParsed",
			 TrabajadorHelper.NOMBRE_GET_METHOD_NAME+"TrabajadorParsed"
			 };
	  
	 
	 TrabajadorGroupBean tgb = new TrabajadorGroupBean();
	 try
	{
		tgb.setElemento(TrabajadorHelper.getTrabajador(request));
	} catch (TorqueException e)
	{
		logger.severe(e.getMessage());
	}
	 xmlResponseService(response,tgb.buildXml(getMethodos, null,"ISO-8859-1"));
 }
 
 public void serviceGetTrabajadorDetallePdf(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
	 utf8RequestService(request);
	 String[] getMethodos= new String[] {
			 TrabajadorHelper.CIF_GET_METHOD_NAME+"TrabajadorParsed",
			 TrabajadorHelper.NOMBRE_GET_METHOD_NAME+"TrabajadorParsed",
			 TrabajadorHelper.APELLIDOS_GET_METHOD_NAME+"TrabajadorParsed",
			 TrabajadorHelper.APELLIDOSDOS_GET_METHOD_NAME+"TrabajadorParsed",
			 TrabajadorHelper.DIRECCION_GET_METHOD_NAME+"TrabajadorParsed",
			 TrabajadorHelper.LOCALIDAD_ID_GET_METHOD_NAME+"TrabajadorParsed",
			 TrabajadorHelper.CP_GET_METHOD_NAME+"TrabajadorParsed",
			 TrabajadorHelper.TELEFONO_GET_METHOD_NAME+"TrabajadorParsed",
			 TrabajadorHelper.MOVIL_GET_METHOD_NAME+"TrabajadorParsed",
			 TrabajadorHelper.EMAIL_GET_METHOD_NAME+"TrabajadorParsed",
			 TrabajadorHelper.FECHA_ALTA_GET_METHOD_NAME+"TrabajadorParsed",
			 TrabajadorHelper.FECHA_BAJA_GET_METHOD_NAME+"TrabajadorParsed",
			 TrabajadorHelper.NUMERO_GET_METHOD_NAME+"TrabajadorParsed",
			 TrabajadorHelper.CATEGORIA_ID_GET_METHOD_NAME+"TrabajadorParsed",			 
			 TrabajadorHelper.COSTEHORA_GET_METHOD_NAME+"TrabajadorParsed",			 
			 TrabajadorHelper.OBSERVACION_GET_METHOD_NAME+"TrabajadorParsed"
			 };
	  
	 
	 TrabajadorGroupBean tgb = new TrabajadorGroupBean();
	 try
	{
		tgb.setElemento(TrabajadorHelper.getTrabajador(request));
	} catch (TorqueException e)
	{
		logger.severe(e.getMessage());
	}
	
	 byte[] content =  PdfUtils.getBytes(replaceStringBuffer(tgb.buildXml(getMethodos, null,"ISO-8859-1"),"n/a"," "), trabajador_transformer,"ISO-8859-1");
	   response.addHeader("content-disposition","attachment;filename=trabajadorDetalle.pdf");
	   response.setContentType("application/pdf");
	   response.setHeader("Cache-Control", "");//para que funcione en IE
	   response.setContentLength(content.length);
	   response.getOutputStream().write(content);
	   response.getOutputStream().flush();  
	   response.getOutputStream().close();
	
 } 
 
 public void serviceTrabajadorTableContentPdf(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
  Criteria c= new Criteria();	
  String paramQuery =  WebUtils.getStringParam(request, "query");
  if ((paramQuery != null)&& (paramQuery.compareTo("")!=0) )
	  c = TrabajadorManager.buildSearchCriteria(paramQuery);   
  c = criteriaTrabajadorTableContent(request,c);
  //System.out.println("---crit-->"+c.toString());
  TrabajadorGroupBean tgb = TrabajadorManager.getTrabajadors(c);
  
  String[] methodos= new String[] {	
			TrabajadorHelper.CIF_GET_METHOD_NAME+"TrabajadorParsed",
			TrabajadorHelper.NOMBRE_GET_METHOD_NAME+"TrabajadorParsed",
			TrabajadorHelper.APELLIDOS_GET_METHOD_NAME+"TrabajadorParsed",
			TrabajadorHelper.TELEFONO_GET_METHOD_NAME+"TrabajadorParsed",
			TrabajadorHelper.MOVIL_GET_METHOD_NAME+"TrabajadorParsed"
			};
  
	 byte[] content =  PdfUtils.getBytes(replaceStringBuffer(tgb.buildXml(methodos, null,"ISO-8859-1"),"n/a"," "), trabajadores_transformer,"ISO-8859-1");

	   response.addHeader("content-disposition","attachment;filename=ListaTrabajador.pdf");
	   response.setContentType("application/pdf");
	   response.setHeader("Cache-Control", "");//para que funcione en IE
	   response.setContentLength(content.length);
	   response.getOutputStream().write(content);
	   response.getOutputStream().flush();  
	   response.getOutputStream().close();

 } 
 
}


