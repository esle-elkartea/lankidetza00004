package net.idtoki.serteca.controller;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.ResourceBundle;
import java.util.logging.Logger;

import javax.servlet.ServletConfig;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.xml.transform.Source;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.stream.StreamSource;

import net.idtoki.serteca.group.ReparacionGroupBean;
import net.idtoki.serteca.group.PrestamoGroupBean;
import net.idtoki.serteca.group.VehiculoCortesiaGroupBean;
import net.idtoki.serteca.helper.ReparacionHelper;
import net.idtoki.serteca.helper.PrestamoHelper;
import net.idtoki.serteca.helper.VehiculoCortesiaHelper;
import net.idtoki.serteca.manager.ReparacionManager;
import net.idtoki.serteca.manager.PrestamoManager;
import net.idtoki.serteca.manager.VehiculoCortesiaManager;
import net.idtoki.serteca.model.ReparacionPeer;
import net.idtoki.serteca.model.Prestamo;
import net.idtoki.serteca.model.PrestamoPeer;
import net.idtoki.serteca.model.VehiculoCortesiaPeer;
import net.zylk.tools.ajax.AjaxUtils;
import net.zylk.tools.ajax.AjaxUtils.DinamicGridBean;
import net.zylk.tools.format.FormatUtils;
import net.zylk.tools.pdf.PdfUtils;
import net.zylk.tools.xml.XmlUtils;
import net.zylk.torque.TorqueUtils;
import net.zylk.web.WebUtils;

import org.apache.torque.TorqueException;
import org.apache.torque.util.Criteria;

/**
 * The skeleton for this class was autogenerated by Torque on:
 *
 * [Wed Feb 01 12:46:43 CET 2006]
 *
 *  You should add additional methods to this class to meet the
 *  application requirements.  This class will only be generated as
 *  long as it does not already exist in the output directory.
 */
public class PrestamoController
    extends net.idtoki.serteca.controller.BasePrestamoController
{
 private static final Logger logger = Logger.getLogger("net.idtoki.serteca.controller.PrestamoController");
 private TransformerFactory tFactory = TransformerFactory.newInstance();
 private Transformer prestamo_transformer = null; 
 private Transformer prestamos_transformer = null;
 private Transformer prestamo_informe_transformer = null;

 public void init(ServletConfig config)
 {
	  super.init();
	  ResourceBundle resource = ResourceBundle.getBundle("net/idtoki/serteca/app/config/app-config");
	  File prestamo = new File(resource.getString("app.xsl.templates.dir")+"/PdfPrestamo.xslt");
	  Source xslSource = new StreamSource(prestamo);
	  File prestamos = new File(resource.getString("app.xsl.templates.dir")+"/PdfListaPrestamo.xslt");
	  Source xslSourceT = new StreamSource(prestamos); 
	  File prestamoInforme = new File(resource.getString("app.xsl.templates.dir")+"/PdfPrestamoInforme.xslt");
	  Source xslSourceInforme = new StreamSource(prestamoInforme);	  
	  try{
		  prestamo_transformer = tFactory.newTransformer(xslSource);
		  prestamos_transformer = tFactory.newTransformer(xslSourceT);
		  prestamo_informe_transformer = tFactory.newTransformer(xslSourceInforme);	
	  }catch (Exception e){
	    e.printStackTrace();
	  }  
 }
 
 public void serviceAddPrestamo(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
		//recojo los parametros del formulario y doy de alta un nuevo VehiculoCortesia
	 try
	 {
		 utf8RequestService(request);
		 Prestamo pr = PrestamoHelper.createObj(request);
		 pr.setFechaIni(FormatUtils.ddmmaaaa2aaaammdd(pr.getFechaIni(),"-",""));
		 pr.setFechaFin(FormatUtils.ddmmaaaa2aaaammdd(pr.getFechaFin(),"-",""));
		 logger.info("************ hora valor *************** " + pr.getHoraIni());
		 if (pr.getHoraIni().compareTo("")!=0)
			 pr.setHoraIni(FormatUtils.hhmmss2hhmm(FormatUtils.hhmmss2hhmmss(pr.getHoraIni()+":00",":","")));
		 if (pr.getHoraFin().compareTo("")!=0)
			 pr.setHoraFin(FormatUtils.hhmmss2hhmm(FormatUtils.hhmmss2hhmmss(pr.getHoraFin()+":00",":","")));
		 PrestamoGroupBean prgb = new PrestamoGroupBean();
		 prgb.setElemento(pr);
		 prgb.save();
		 /*
		  * Bittor Gorostegi 2/05/2006
		  * Esta invocación realiza el cambio de estado de los vehículos de cortesía
		  * actualmente se realiza ya por triggers en la BBDD
		 VehiculoCortesia vc=VehiculoCortesiaManager.getVehiculoCortesia(pr.getVehiculoCortesiaId());
		 vc.comprobarEstadoVehiculoCortesia();
		 */
	 }
	 catch(TorqueException te)
	 {
		 response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
	 } 
 } 
 
 public StringBuffer replaceStringBuffer (StringBuffer strBA, String strOrigen, String strDestino) 
 {
	 return new StringBuffer(strBA.toString().replaceAll(strOrigen,strDestino));
 } 
 
 private Criteria ordenacion(Criteria c,String CampoOrdenacion,String OrdenOrdenacion) 
 { 
 	if((OrdenOrdenacion != null )&& (OrdenOrdenacion.compareTo("ASC")==0))
 		if ((CampoOrdenacion != null)) //&& (CampoOrdenacion.compareTo("nombre")==0))
 		{
 			//c.clear();
 			c.addAscendingOrderByColumn(CampoOrdenacion.toString());
 		}
 	if  ((OrdenOrdenacion != null) && (OrdenOrdenacion.compareTo("DESC")==0))
 		if ((CampoOrdenacion != null)) //&& (CampoOrdenacion.compareTo("nombre")==0))
 			{
 			//c.clear();
 			c.addDescendingOrderByColumn(CampoOrdenacion.toString());
 		}
 	return c;
 }

 private Criteria criteriaPrestamoTableContent(HttpServletRequest request,Criteria c) throws IOException, ServletException
 {
	 String param =  WebUtils.getStringParam(request, new VehiculoCortesiaHelper().getIdName());
	 if(param != null)
		 TorqueUtils.addEqualCriteria(c,PrestamoPeer.VEHICULO_CORTESIA_ID,param);
	 param =  WebUtils.getStringParam(request, new ReparacionHelper().getIdName());
	 if(param != null)
		 TorqueUtils.addEqualCriteria(c,PrestamoPeer.REPARACION_ID,param);	 	 
 	  String paramSortCol =  WebUtils.getStringParam(request, "sort_col");
 	  String paramSortDir =  WebUtils.getStringParam(request, "sort_dir");
 	  //System.out.println("----query:"+paramQuery+"----col:"+paramSortCol+"----dir:"+paramSortDir+"----filtro:"+paramFiltro);
 	  c = ordenacion(c,paramSortCol,paramSortDir);

 	  return c;
 } 
 
 public void servicePrestamoTableContent(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
	 utf8RequestService(request);
	 int numElemPedidosBD = 40;
	 int gap = 0;//gap = viewedRows - numElemVisiblesUltPag	  
	 DinamicGridBean dgb = WebUtils.getDinamicGridBeanParam(request,numElemPedidosBD,gap); 
	 Criteria c =PrestamoManager.buildSearchCriteria(dgb);
	 c =criteriaPrestamoTableContent(request,c);
	 PrestamoGroupBean vcgb = PrestamoManager.getPrestamos(c);
	 dgb.setTotalSize(vcgb.getTotalSize());
	  String[] methodos= new String[] {	
			  PrestamoHelper.VEHICULO_CORTESIA_ID_GET_METHOD_NAME+"PrestamoParsed",
			  PrestamoHelper.REPARACION_ID_GET_METHOD_NAME+"PrestamoParsed",
			  PrestamoHelper.FECHA_INI_GET_METHOD_NAME+"PrestamoParsed",
			  PrestamoHelper.FECHA_FIN_GET_METHOD_NAME+"PrestamoParsed",
			  "getEditPrestamo",
			  "getDeletePrestamo"
			  };
	 
	 		xmlResponseService(response,AjaxUtils.buildXmlAjaxResponseTableContentFromListObj(
			  										vcgb.getAlmacen(),
			  										methodos,
			  										PrestamoHelper.ID_GET_METHOD_NAME, dgb,"ISO-8859-1")); 

 } 
 
 protected StringBuffer updateReparacionIdResponseCallBack(String s)
 {
  ArrayList a = AjaxUtils.splitIdFields(s);
    	return new StringBuffer(PrestamoManager.getPrestamo(Integer.parseInt(a.get(0).toString())).getReparacionIdPrestamoParsed());
   }
 protected StringBuffer updateVehiculoCortesiaIdResponseCallBack(String s)
 {
  ArrayList a = AjaxUtils.splitIdFields(s);
    	return new StringBuffer(PrestamoManager.getPrestamo(Integer.parseInt(a.get(0).toString())).getVehiculoCortesiaIdPrestamoParsed());
   }
 
 
 public void serviceDeletePrestamo(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
	 int idBorrar=-1;
	 idBorrar=WebUtils.getintParam(request, "borrarId");
	 if (idBorrar!=-1)
		 if (PrestamoManager.borraPrestamo(idBorrar))
			 WebUtils.writeXmlResponse(response,XmlUtils.buildXmlOKResponse("ISO-8859-1"));
		 else
			 WebUtils.writeXmlResponse(response,XmlUtils.buildXmlNotOKResponse("ISO-8859-1"));			 
 } 
 
 public void servicePrestamoElement(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
  StringBuffer cadena=null;
  Criteria c= new Criteria();
  int claveId=-1;
  claveId=WebUtils.getintParam(request, "prestamos.ID");
  if (claveId!=-1)
  {
	  c.add(PrestamoPeer.ID, claveId);
  }
  c.addAscendingOrderByColumn(PrestamoPeer.ID);
  PrestamoGroupBean trgb = PrestamoManager.getPrestamos(c);
  
  if (trgb.getTotalSize()!=0)
  {
	  String [] parametros={
			  PrestamoHelper.ID_GET_METHOD_NAME,
			  PrestamoHelper.VEHICULO_CORTESIA_ID_GET_METHOD_NAME+"PrestamoParsed",
			  PrestamoHelper.REPARACION_ID_GET_METHOD_NAME+"PrestamoParsed",
			  PrestamoHelper.FECHA_INI_GET_METHOD_NAME+"PrestamoParsed",
			  PrestamoHelper.HORA_INI_GET_METHOD_NAME+"PrestamoParsed",
			  PrestamoHelper.FECHA_FIN_GET_METHOD_NAME+"PrestamoParsed",
			  PrestamoHelper.HORA_FIN_GET_METHOD_NAME+"PrestamoParsed"
	  			};
	  cadena=trgb.buildXml(parametros,null,"ISO-8859-1");
  }
  xmlResponseService(response, cadena);
 }   
 
 public void servicePrestamoVehiculoCortesia(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
  String cadena=null;
  Criteria c= new Criteria();
  int claveId=-1;
  claveId=WebUtils.getintParam(request, "Vehiculos_Cortesia.ID");
  if (claveId!=-1)
  {
	  c.add(VehiculoCortesiaPeer.ID, claveId);
  }
  c.addAscendingOrderByColumn(VehiculoCortesiaPeer.ID);
  VehiculoCortesiaGroupBean trgb = VehiculoCortesiaManager.getVehiculoCortesias(c);
  
  if (trgb.getTotalSize()!=0)
  {
	  cadena = "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" ?>";
  	  cadena = cadena + "<result><Prestamos.VEHICULO_CORTESIA_ID>" + trgb.getVehiculoCortesia(0).getId() + "-" + trgb.getVehiculoCortesia(0).getMatriculaVehiculoCortesiaParsed() + "</Prestamos.VEHICULO_CORTESIA_ID></result>";
  }
  
  xmlResponseService(response, new StringBuffer(cadena));
 } 
 
 public void servicePrestamoReparacion(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
  String cadena=null;
  Criteria c= new Criteria();
  int claveId=-1;
  claveId=WebUtils.getintParam(request, "Reparaciones.ID");
  if (claveId!=-1)
  {
	  c.add(ReparacionPeer.ID, claveId);
  }
  c.addAscendingOrderByColumn(ReparacionPeer.ID);
  ReparacionGroupBean trgb = ReparacionManager.getReparacions(c);
  
  if (trgb.getTotalSize()!=0)
  {
	  cadena = "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" ?>";
  	  cadena = cadena + "<result><Prestamos.REPARACION_ID>" + trgb.getReparacion(0).getId() + "-" + trgb.getReparacion(0).getVehiculoIdReparacionParsed() + "</Prestamos.REPARACION_ID></result>";
  }
  
  xmlResponseService(response, new StringBuffer(cadena));
 }
 
 public void serviceGetPrestamoDetalleXml (HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
	 utf8RequestService(request);
	 String[] getMethodos= new String[] {
			  PrestamoHelper.ID_GET_METHOD_NAME,
			  PrestamoHelper.VEHICULO_CORTESIA_ID_GET_METHOD_NAME+"PrestamoParsed",
			  PrestamoHelper.REPARACION_ID_GET_METHOD_NAME+"PrestamoParsed",
			  PrestamoHelper.FECHA_INI_GET_METHOD_NAME+"PrestamoParsed",
			  PrestamoHelper.FECHA_FIN_GET_METHOD_NAME+"PrestamoParsed"	
			 };
	  
	 
	 PrestamoGroupBean tgb = new PrestamoGroupBean();
	 try
	{
		tgb.setElemento(PrestamoHelper.getPrestamo(request));
	} catch (TorqueException e)
	{
		logger.severe(e.getMessage());
	}
	 xmlResponseService(response,tgb.buildXml(getMethodos, null,"ISO-8859-1"));
 }
 
 public void serviceGetPrestamoDetallePdf(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
	 utf8RequestService(request);
	 String[] getMethodos= new String[] {
			  PrestamoHelper.ID_GET_METHOD_NAME,
			  PrestamoHelper.VEHICULO_CORTESIA_ID_GET_METHOD_NAME+"PrestamoParsed",
			  PrestamoHelper.REPARACION_ID_GET_METHOD_NAME+"PrestamoParsed",
			  PrestamoHelper.FECHA_INI_GET_METHOD_NAME+"PrestamoParsed",
			  PrestamoHelper.FECHA_FIN_GET_METHOD_NAME+"PrestamoParsed"	
			 };
	  
	 
	 PrestamoGroupBean tgb = new PrestamoGroupBean();
	 try
	{
		tgb.setElemento(PrestamoHelper.getPrestamo(request));
	} catch (TorqueException e)
	{
		logger.severe(e.getMessage());
	}
	
	 byte[] content =  PdfUtils.getBytes(replaceStringBuffer(tgb.buildXml(getMethodos, null,"ISO-8859-1"),"n/a"," "), prestamo_transformer,"ISO-8859-1");
	   response.addHeader("content-disposition","attachment;filename=prestamoDetalle.pdf");
	   response.setContentType("application/pdf");
	   response.setHeader("Cache-Control", "");//para que funcione en IE
	   response.setContentLength(content.length);
	   response.getOutputStream().write(content);
	   response.getOutputStream().flush();  
	   response.getOutputStream().close();
	
 }  
 
 public void servicePrestamoTableContentPdf(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
	 utf8RequestService(request);
  Criteria c= new Criteria();
  String paramQuery =  WebUtils.getStringParam(request, "query");
  if ((paramQuery != null)&& (paramQuery.compareTo("")!=0) )
	  c = PrestamoManager.buildSearchCriteria(paramQuery);   
  c =criteriaPrestamoTableContent(request,c);  
  PrestamoGroupBean tgb = PrestamoManager.getPrestamos(c);
  
  String[] methodos= new String[] {	
		  PrestamoHelper.VEHICULO_CORTESIA_ID_GET_METHOD_NAME+"PrestamoParsed",
		  PrestamoHelper.REPARACION_ID_GET_METHOD_NAME+"PrestamoParsed",
		  PrestamoHelper.FECHA_INI_GET_METHOD_NAME+"PrestamoParsed",
		  PrestamoHelper.FECHA_FIN_GET_METHOD_NAME+"PrestamoParsed"	
			};
  
	 byte[] content =  PdfUtils.getBytes(replaceStringBuffer(tgb.buildXml(methodos, null,"ISO-8859-1"),"n/a"," "), prestamos_transformer,"ISO-8859-1");
	   response.addHeader("content-disposition","attachment;filename=ListaPrestamo.pdf");
	   response.setContentType("application/pdf");
	   response.setHeader("Cache-Control", "");//para que funcione en IE
	   response.setContentLength(content.length);
	   response.getOutputStream().write(content);
	   response.getOutputStream().flush();  
	   response.getOutputStream().close(); 

 }   
 
 public void serviceGetPrestamoInformePdf(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
	 utf8RequestService(request);
	 String[] getMethodos= new String[] {
			  PrestamoHelper.ID_GET_METHOD_NAME,
			  PrestamoHelper.FECHA_INI_GET_METHOD_NAME+"PrestamoParsed",
			  PrestamoHelper.FECHA_FIN_GET_METHOD_NAME+"PrestamoParsed",
			  PrestamoHelper.HORA_INI_GET_METHOD_NAME+"PrestamoParsed",
			  PrestamoHelper.HORA_FIN_GET_METHOD_NAME+"PrestamoParsed",
			  "getReparacionIdPrestamo",
			  "getReparacionVehiculoMatriculaPrestamo",
			  "getVehiculoCortesiaMatriculaPrestamo",
			  "getVehiculoCortesiaModeloPrestamo",
			  "getVehiculoCortesiaChasisPrestamo"
			 };
	  
	 
	 PrestamoGroupBean tgb = new PrestamoGroupBean();
	 try
	{
		tgb.setElemento(PrestamoHelper.getPrestamo(request));
	} catch (TorqueException e)
	{
		logger.severe(e.getMessage());
	}
	
	 byte[] content =  PdfUtils.getBytes(replaceStringBuffer(tgb.buildXml(getMethodos, null,"ISO-8859-1"),"n/a"," "), prestamo_informe_transformer,"ISO-8859-1");
	   response.addHeader("content-disposition","attachment;filename=prestamoInforme.pdf");
	   response.setContentType("application/pdf");
	   response.setHeader("Cache-Control", "");//para que funcione en IE
	   response.setContentLength(content.length);
	   response.getOutputStream().write(content);
	   response.getOutputStream().flush();  
	   response.getOutputStream().close();
	
 } 
 
}


