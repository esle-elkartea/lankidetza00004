package net.idtoki.serteca.controller;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.ResourceBundle;
import java.util.logging.Logger;

import javax.servlet.ServletConfig;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.xml.transform.Source;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.stream.StreamSource;

import org.apache.torque.TorqueException;
import org.apache.torque.util.Criteria;

import net.idtoki.serteca.group.ReparacionGroupBean;
import net.idtoki.serteca.group.VehiculoGroupBean;
import net.idtoki.serteca.helper.FacturasHelper;
import net.idtoki.serteca.helper.OrdenTrabajoHelper;
import net.idtoki.serteca.helper.PrestamoHelper;
import net.idtoki.serteca.helper.ReparacionHelper;
import net.idtoki.serteca.helper.VehiculoHelper;
import net.idtoki.serteca.manager.ReparacionManager;
import net.idtoki.serteca.manager.VehiculoManager;
import net.idtoki.serteca.model.Reparacion;
import net.idtoki.serteca.model.ReparacionPeer;
import net.idtoki.serteca.model.VehiculoPeer;
import net.zylk.tools.ajax.AjaxUtils;
import net.zylk.tools.ajax.AjaxUtils.DinamicGridBean;
import net.zylk.tools.format.FormatUtils;
import net.zylk.tools.pdf.PdfUtils;
import net.zylk.tools.xml.XmlUtils;
import net.zylk.torque.TorqueUtils;
import net.zylk.web.WebUtils;

/**
 * The skeleton for this class was autogenerated by Torque on:
 *
 * [Wed Feb 01 12:46:43 CET 2006]
 *
 *  You should add additional methods to this class to meet the
 *  application requirements.  This class will only be generated as
 *  long as it does not already exist in the output directory.
 */
public class ReparacionController
    extends net.idtoki.serteca.controller.BaseReparacionController
{
 private static final Logger logger = Logger.getLogger("net.idtoki.serteca.controller.ReparacionController");
 private TransformerFactory tFactory = TransformerFactory.newInstance();
 private Transformer reparacion_transformer = null; 
 private Transformer reparacions_transformer = null;   
 private Transformer reparacion_informe_transformer = null;

 public void init(ServletConfig config)
 {
	  super.init();
	  ResourceBundle resource = ResourceBundle.getBundle("net/idtoki/serteca/app/config/app-config");
	  File reparacion = new File(resource.getString("app.xsl.templates.dir")+"/PdfReparacion.xslt");
	  Source xslSource = new StreamSource(reparacion);
	  File reparacions = new File(resource.getString("app.xsl.templates.dir")+"/PdfListaReparacion.xslt");
	  Source xslSourceT = new StreamSource(reparacions);
	  File reparacionInforme = new File(resource.getString("app.xsl.templates.dir")+"/PdfReparacionInforme.xslt");
	  Source xslSourceInforme = new StreamSource(reparacionInforme);	  
	  try{
		  reparacion_transformer = tFactory.newTransformer(xslSource);
		  reparacions_transformer = tFactory.newTransformer(xslSourceT);
		  reparacion_informe_transformer = tFactory.newTransformer(xslSourceInforme);
	  }catch (Exception e){
	    e.printStackTrace();
	  }  
} 
 
 public void serviceAddReparacion(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
		//recojo los parametros del formulario y doy de alta una nueva reparación
	 utf8RequestService(request);
	 try
	 {
		 Reparacion rp = ReparacionHelper.createObj(request);
		 rp.setFechaEntrada(FormatUtils.ddmmaaaa2aaaammdd(rp.getFechaEntrada(),"-",""));
		 rp.setFechaSalida(FormatUtils.ddmmaaaa2aaaammdd(rp.getFechaSalida(),"-",""));
		 ReparacionGroupBean rgb = new ReparacionGroupBean();
		 rgb.setElemento(rp);
		 rgb.save();
	 }
	 catch(TorqueException te)
	 {
		 response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
	 }
 }
 
 public void serviceDeleteReparacion(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
		//recojo los parametros del formulario y doy de alta una nueva reparación
		 int idBorrar=-1;
		 idBorrar=WebUtils.getintParam(request,"borrarId");
		 if (idBorrar!=-1)
			 if (ReparacionManager.borraReparacion(idBorrar))
				 WebUtils.writeXmlResponse(response,XmlUtils.buildXmlOKResponse("ISO-8859-1"));
			 else
				 WebUtils.writeXmlResponse(response,XmlUtils.buildXmlNotOKResponse("ISO-8859-1"));				 
 }
 
 public StringBuffer replaceStringBuffer (StringBuffer strBA, String strOrigen, String strDestino) 
 {
	 return new StringBuffer(strBA.toString().replaceAll(strOrigen,strDestino));
 }
 
 private Criteria ordenacion(Criteria c,String CampoOrdenacion,String OrdenOrdenacion) 
 { 
 	if((OrdenOrdenacion != null )&& (OrdenOrdenacion.compareTo("ASC")==0))
 		if ((CampoOrdenacion != null)) //&& (CampoOrdenacion.compareTo("nombre")==0))
 		{
 			//c.clear();
 			c.addAscendingOrderByColumn(CampoOrdenacion.toString());
 		}
 	if  ((OrdenOrdenacion != null) && (OrdenOrdenacion.compareTo("DESC")==0))
 		if ((CampoOrdenacion != null)) //&& (CampoOrdenacion.compareTo("nombre")==0))
 			{
 			//c.clear();
 			c.addDescendingOrderByColumn(CampoOrdenacion.toString());
 		}
 	return c;
 }

 private Criteria filtro(Criteria c,int filtro) 
 { 
 	 switch (filtro)
 	 {
	  case 1:
		  c.add(ReparacionPeer.ESTADO,0);
		  break;
	  case 2:
		  c.add(ReparacionPeer.ESTADO,1);
		  break;
	  case 3:
		  c.add(ReparacionPeer.ESTADO,2);
		  break;
	 default:
	 	 break;  
 	 }
 	return c;
 }
 
 private Criteria criteriaReparacionTableContent(HttpServletRequest request,Criteria c) throws IOException, ServletException
 {
	 String param =  WebUtils.getStringParam(request, new VehiculoHelper().getIdName());
	 if(param != null)
		 TorqueUtils.addEqualCriteria(c,ReparacionPeer.VEHICULO_ID,param);	
 	  String paramSortCol =  WebUtils.getStringParam(request, "sort_col");
 	  String paramSortDir =  WebUtils.getStringParam(request, "sort_dir");
 	 int paramFiltro =  WebUtils.getintParam(request, "filtro");
 	  //System.out.println("----query:"+paramQuery+"----col:"+paramSortCol+"----dir:"+paramSortDir+"----filtro:"+paramFiltro);
 	  c = ordenacion(c,paramSortCol,paramSortDir);
 	 c = filtro(c,paramFiltro);
 	c.addAscendingOrderByColumn(ReparacionPeer.FECHA_ENTRADA); 

 	  return c;
 }
 
 public void serviceReparacionTableContent(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
	 utf8RequestService(request);
	 int numElemPedidosBD = 40;
	 int gap = 0;//gap = viewedRows - numElemVisiblesUltPag	  
	 DinamicGridBean dgb = WebUtils.getDinamicGridBeanParam(request,numElemPedidosBD,gap);
	 Criteria c =ReparacionManager.buildSearchCriteria(dgb);
	 c =criteriaReparacionTableContent(request,c);
	 
	 ReparacionGroupBean rgb = ReparacionManager.getReparacions(c);
	 dgb.setTotalSize(rgb.getTotalSize());
	  
	 String[] methodos= new String[] {
			 ReparacionHelper.VEHICULO_ID_GET_METHOD_NAME + "ReparacionParsed",
			 ReparacionHelper.FECHA_ENTRADA_GET_METHOD_NAME + "ReparacionParsed",
			 ReparacionHelper.FECHA_SALIDA_GET_METHOD_NAME + "ReparacionParsed",
			 ReparacionHelper.RESPONSABLE_GET_METHOD_NAME + "ReparacionParsed",
			 ReparacionHelper.ESTADO_GET_METHOD_NAME + "ReparacionParsed",
			 ReparacionHelper.KM_GET_METHOD_NAME + "ReparacionParsed",
			 ReparacionHelper.IMPORTE_GET_METHOD_NAME + "ReparacionParsed",
			 	"getEditReparacion",
				"getDeleteReparacion"
	 };
	  
	 xmlResponseService(response,AjaxUtils.buildXmlAjaxResponseTableContentFromListObj(
			  										rgb.getAlmacen(),
			  										methodos,
			  										ReparacionHelper.ID_GET_METHOD_NAME, dgb,"ISO-8859-1")); 
 }
 
 public void serviceReparacionElement(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
  StringBuffer cadena=null;
  Criteria c= new Criteria();
  int claveId=-1;
  claveId=WebUtils.getintParam(request, "reparaciones.ID");
  if (claveId!=-1)
  {
	  c.add(ReparacionPeer.ID, claveId);
  }
  c.addAscendingOrderByColumn(ReparacionPeer.ID);
  ReparacionGroupBean trgb = ReparacionManager.getReparacions(c);
  
  if (trgb.getTotalSize()!=0)
  {
	  String [] parametros={
				 ReparacionHelper.ID_GET_METHOD_NAME, 
				 ReparacionHelper.VEHICULO_ID_GET_METHOD_NAME + "ReparacionParsed",
				 ReparacionHelper.FECHA_ENTRADA_GET_METHOD_NAME + "ReparacionParsed",
				 ReparacionHelper.FECHA_SALIDA_GET_METHOD_NAME + "ReparacionParsed",
				 ReparacionHelper.RESPONSABLE_GET_METHOD_NAME + "ReparacionParsed",
				 ReparacionHelper.ESTADO_GET_METHOD_NAME + "ReparacionParsed",
				 ReparacionHelper.DEPOSITO_GET_METHOD_NAME + "ReparacionParsed",
				 ReparacionHelper.KM_GET_METHOD_NAME + "ReparacionParsed",
				 ReparacionHelper.IMPORTE_GET_METHOD_NAME + "ReparacionParsed",
				 ReparacionHelper.ESTADOPREVIO_GET_METHOD_NAME + "ReparacionParsed",	
				 ReparacionHelper.OBSERVACION_GET_METHOD_NAME + "ReparacionParsed"		  
	  			};
	  cadena=trgb.buildXml(parametros,null,"ISO-8859-1");
  }
  xmlResponseService(response, cadena);
 }  

 /*protected StringBuffer updateFechaEntradaResponseCallBack(String s)
 {
  ArrayList a = AjaxUtils.splitIdFields(s);
    	return new StringBuffer(ReparacionManager.getReparacion( 
    			Integer.parseInt(a.get(0).toString())).getFechaEntradaParsed());
 }*/

 /*protected String updateFechaEntradaRequestCallBack(String value)
 {
  return FormatUtils.ddmmaaaa2aaaammdd(value, "-","");
 }*/
 
 /*protected StringBuffer updateFechaSalidaResponseCallBack(String s)
 {
  ArrayList a = AjaxUtils.splitIdFields(s);
    	return new StringBuffer(ReparacionManager.getReparacion( 
    			Integer.parseInt(a.get(0).toString())).getFechaSalidaParsed());
 }*/

 /*protected String updateFechaSalidaRequestCallBack(String value)
 {
  return FormatUtils.ddmmaaaa2aaaammdd(value, "-","");
 }*/
 
 public void serviceReparacionUlContent(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
	 utf8RequestService(request);
	 String[] methodos= new String[] {
			 ReparacionHelper.ID_GET_METHOD_NAME, 
			 ReparacionHelper.VEHICULO_ID_GET_METHOD_NAME+"ReparacionParsed"
			 };
	 String param =  WebUtils.getStringParam(request, "value");
	 if(param==null || param.length() <= 0)
		 param =  WebUtils.getStringParam(request, new OrdenTrabajoHelper().getReparacionIdName());	
	 if(param==null || param.length() <= 0)
		 	param =  WebUtils.getStringParam(request, new PrestamoHelper().getReparacionIdName());	 
	 if(param==null || param.length() <= 0)
		 param =  WebUtils.getStringParam(request, new FacturasHelper().getReparacionIdName());	 
	 ReparacionGroupBean vgb = ReparacionManager.getReparacions(ReparacionManager.buildSearchCriteria(param));
	 simpleResponseService(response, AjaxUtils.buildAjaxULContentFromListObj(vgb.getAlmacen(),methodos, ReparacionHelper.COMPLEX_ID_GET_METHOD,"Reparacion"));
 }
 

 protected StringBuffer updateVehiculoIdResponseCallBack(String s)
 {
  ArrayList a = AjaxUtils.splitIdFields(s);
    	return new StringBuffer(ReparacionManager.getReparacion(
    			Integer.parseInt(a.get(0).toString())).getVehiculoIdReparacionParsed());
 }

 protected StringBuffer updateResponsableResponseCallBack(String s)
 {
  ArrayList a = AjaxUtils.splitIdFields(s);
    	return new StringBuffer(ReparacionManager.getReparacion(
    			Integer.parseInt(a.get(0).toString())).getResponsableReparacionParsed());
 }

 protected StringBuffer updateImporteResponseCallBack(String s)
 {
  ArrayList a = AjaxUtils.splitIdFields(s);
    	return new StringBuffer(ReparacionManager.getReparacion(
    			Integer.parseInt(a.get(0).toString())).getImporteReparacionParsed());
 }

 protected StringBuffer updateKmResponseCallBack(String s)
 {
  ArrayList a = AjaxUtils.splitIdFields(s);
    	return new StringBuffer(ReparacionManager.getReparacion(
    			Integer.parseInt(a.get(0).toString())).getKmReparacionParsed());
 }

 protected String updateKmRequestCallBack(String value)
 {
	 String km="0";
	 if (value.compareTo("")!=0)
		 km=value;
  return km;
  }

 protected String updateImporteRequestCallBack(String value)
 {
	 String importe="0";
	 if (value.compareTo("")!=0)
		 importe=value;
  return importe;
  }
 
 public void serviceReparacionVehiculo(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
  String cadena=null;
  Criteria c= new Criteria();
  int claveId=-1;
  claveId=WebUtils.getintParam(request, "Vehiculos.ID");
  if (claveId!=-1)
  {
	  c.add(VehiculoPeer.ID, claveId);
  }
  c.addAscendingOrderByColumn(VehiculoPeer.ID);
  VehiculoGroupBean trgb = VehiculoManager.getVehiculos(c);
  
  if (trgb.getTotalSize()!=0)
  {
	  cadena = "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" ?>";
	  cadena = cadena + "<result><Reparaciones.VEHICULO_ID>" + trgb.getVehiculo(0).getId() + "-" + trgb.getVehiculo(0).getMatriculaVehiculoParsed() + "</Reparaciones.VEHICULO_ID></result>";
  }
  
  xmlResponseService(response, new StringBuffer(cadena));
 }
 
 public void serviceGetReparacionDetalleXml (HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
	 String[] getMethodos= new String[] {
			 ReparacionHelper.ID_GET_METHOD_NAME, 
			 ReparacionHelper.VEHICULO_ID_GET_METHOD_NAME + "ReparacionParsed",
			 ReparacionHelper.FECHA_ENTRADA_GET_METHOD_NAME + "ReparacionParsed",
			 ReparacionHelper.FECHA_SALIDA_GET_METHOD_NAME + "ReparacionParsed",
			 ReparacionHelper.RESPONSABLE_GET_METHOD_NAME + "ReparacionParsed",
			 ReparacionHelper.ESTADO_GET_METHOD_NAME + "ReparacionParsed",
			 ReparacionHelper.KM_GET_METHOD_NAME + "ReparacionParsed",
			 ReparacionHelper.IMPORTE_GET_METHOD_NAME + "ReparacionParsed",
			 ReparacionHelper.OBSERVACION_GET_METHOD_NAME + "ReparacionParsed"
			 };
	  
	 
	 ReparacionGroupBean tgb = new ReparacionGroupBean();
	 try
	{
		tgb.setElemento(ReparacionHelper.getReparacion(request));
	} catch (TorqueException e)
	{
		logger.severe(e.getMessage());
	}
	 xmlResponseService(response,tgb.buildXml(getMethodos, null,"ISO-8859-1"));
 }
 
 public void serviceGetReparacionDetallePdf(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
	 utf8RequestService(request);
	 String[] getMethodos= new String[] {
			 ReparacionHelper.ID_GET_METHOD_NAME, 
			 ReparacionHelper.VEHICULO_ID_GET_METHOD_NAME + "ReparacionParsed",
			 ReparacionHelper.FECHA_ENTRADA_GET_METHOD_NAME + "ReparacionParsed",
			 ReparacionHelper.FECHA_SALIDA_GET_METHOD_NAME + "ReparacionParsed",
			 ReparacionHelper.RESPONSABLE_GET_METHOD_NAME + "ReparacionParsed",
			 ReparacionHelper.ESTADO_GET_METHOD_NAME + "ReparacionParsed",
			 ReparacionHelper.KM_GET_METHOD_NAME + "ReparacionParsed",
			 ReparacionHelper.IMPORTE_GET_METHOD_NAME + "ReparacionParsed",
			 ReparacionHelper.OBSERVACION_GET_METHOD_NAME + "ReparacionParsed"
			 };
	  
	 ReparacionGroupBean tgb = new ReparacionGroupBean();
	 try
	{
		tgb.setElemento(ReparacionHelper.getReparacion(request));
	} catch (TorqueException e)
	{
		logger.severe(e.getMessage());
	}
	
	 byte[] content =  PdfUtils.getBytes(replaceStringBuffer(tgb.buildXml(getMethodos, null,"ISO-8859-1"),"n/a"," "), reparacion_transformer,"ISO-8859-1");
	   response.addHeader("content-disposition","attachment;filename=reparacionDetalle.pdf");
	   response.setContentType("application/pdf");
	   response.setHeader("Cache-Control", "");//para que funcione en IE
	   response.setContentLength(content.length);
	   response.getOutputStream().write(content);
	   response.getOutputStream().flush();  
	   response.getOutputStream().close();
	
 }  
 
 public void serviceGetReparacionInformePdf(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
	 utf8RequestService(request);
	 String[] getMethodos= new String[] {
			 ReparacionHelper.ID_GET_METHOD_NAME, 
			 ReparacionHelper.FECHA_ENTRADA_GET_METHOD_NAME + "ReparacionParsed",
			 ReparacionHelper.FECHA_SALIDA_GET_METHOD_NAME + "ReparacionParsed",
			 ReparacionHelper.KM_GET_METHOD_NAME + "ReparacionParsed",
			 ReparacionHelper.DEPOSITO_GET_METHOD_NAME + "ReparacionParsed",
			 ReparacionHelper.OBSERVACION_GET_METHOD_NAME + "ReparacionParsed",
			 "getTipoOrdenTrabajoParsed",
			 "getDescripcionOrdenTrabajoParsed",
			 "getClienteIdReparacionParsed",
			 "getClienteNifReparacionParsed",
			 "getClienteNombreReparacionParsed",
			 "getClienteNombreComercialReparacionParsed",
			 "getClienteTelefonoReparacionParsed",
			 "getClienteMovilReparacionParsed",
			 "getVehiculoMatriculaReparacionParsed",
			 "getVehiculoMarcaReparacionParsed",
			 "getVehiculoModeloReparacionParsed",
			 "getVehiculoChasisIdReparacionParsed"
			 };
	 
	 String[] getMetodosHijos = new String[] {"getOrdenTrabajos"};
	  
	 
	 ReparacionGroupBean tgb = new ReparacionGroupBean();
	 try
	{
		tgb.setElemento(ReparacionHelper.getReparacion(request));
	} catch (TorqueException e)
	{
		logger.severe(e.getMessage());
	}
	
	 byte[] content =  PdfUtils.getBytes(replaceStringBuffer(tgb.buildXml(getMethodos, getMetodosHijos,"ISO-8859-1"),"n/a"," "), reparacion_informe_transformer,"ISO-8859-1");
	   response.addHeader("content-disposition","attachment;filename=reparacionInforme.pdf");
	   response.setContentType("application/pdf");
	   response.setHeader("Cache-Control", "");//para que funcione en IE
	   response.setContentLength(content.length);
	   response.getOutputStream().write(content);
	   response.getOutputStream().flush();  
	   response.getOutputStream().close();
	
 }  
 
 
 public void serviceReparacionTableContentPdf(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
  utf8RequestService(request);
  Criteria c= new Criteria();
  String paramQuery =  WebUtils.getStringParam(request, "query");
  if ((paramQuery != null)&& (paramQuery.compareTo("")!=0) )
	  c = ReparacionManager.buildSearchCriteria(paramQuery);   
  c =criteriaReparacionTableContent(request,c);	   
  ReparacionGroupBean tgb = ReparacionManager.getReparacions(c);
  
  String[] methodos= new String[] {	
			 ReparacionHelper.VEHICULO_ID_GET_METHOD_NAME + "ReparacionParsed",
			 ReparacionHelper.FECHA_ENTRADA_GET_METHOD_NAME + "ReparacionParsed",
			 ReparacionHelper.FECHA_SALIDA_GET_METHOD_NAME + "ReparacionParsed",
			 ReparacionHelper.RESPONSABLE_GET_METHOD_NAME + "ReparacionParsed",
			 ReparacionHelper.ESTADO_GET_METHOD_NAME + "ReparacionParsed",
			 ReparacionHelper.KM_GET_METHOD_NAME + "ReparacionParsed",
			 ReparacionHelper.IMPORTE_GET_METHOD_NAME + "ReparacionParsed",
			 ReparacionHelper.OBSERVACION_GET_METHOD_NAME + "ReparacionParsed"
			};
  
	 byte[] content =  PdfUtils.getBytes(replaceStringBuffer(tgb.buildXml(methodos, null,"ISO-8859-1"),"n/a"," "), reparacions_transformer,"ISO-8859-1");
	   response.addHeader("content-disposition","attachment;filename=ListaReparacion.pdf");
	   response.setContentType("application/pdf");
	   response.setHeader("Cache-Control", "");//para que funcione en IE
	   response.setContentLength(content.length);
	   response.getOutputStream().write(content);
	   response.getOutputStream().flush();  
	   response.getOutputStream().close();
 }  

}



