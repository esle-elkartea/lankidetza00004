package net.idtoki.serteca.controller;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.ResourceBundle;
import java.util.logging.Logger;

import javax.servlet.ServletConfig;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.xml.transform.Source;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.stream.StreamSource;

import net.idtoki.serteca.group.ClienteGroupBean;
import net.idtoki.serteca.group.FacturasGroupBean;
import net.idtoki.serteca.group.ReparacionGroupBean;
import net.idtoki.serteca.helper.ClienteHelper;
import net.idtoki.serteca.helper.FacturasHelper;
import net.idtoki.serteca.helper.LineaFacturaHelper;
import net.idtoki.serteca.helper.ReparacionHelper;
import net.idtoki.serteca.manager.ClienteManager;
import net.idtoki.serteca.manager.FacturasManager;
import net.idtoki.serteca.manager.ReparacionManager;
import net.idtoki.serteca.model.ClientePeer;
import net.idtoki.serteca.model.Facturas;
import net.idtoki.serteca.model.FacturasPeer;
import net.idtoki.serteca.model.ReparacionPeer;
import net.zylk.tools.ajax.AjaxUtils;
import net.zylk.tools.ajax.AjaxUtils.DinamicGridBean;
import net.zylk.tools.format.FormatUtils;
import net.zylk.tools.pdf.PdfUtils;
import net.zylk.tools.xml.XmlUtils;
import net.zylk.torque.TorqueUtils;
import net.zylk.web.WebUtils;

import org.apache.torque.TorqueException;
import org.apache.torque.util.Criteria;

/**
 * The skeleton for this class was autogenerated by Torque on:
 *
 * [Wed Feb 01 12:46:43 CET 2006]
 *
 *  You should add additional methods to this class to meet the
 *  application requirements.  This class will only be generated as
 *  long as it does not already exist in the output directory.
 */
public class FacturasController
    extends net.idtoki.serteca.controller.BaseFacturasController
{
 private static final Logger logger = Logger.getLogger("net.idtoki.serteca.controller.FacturasController");
 private TransformerFactory tFactory = TransformerFactory.newInstance();
 private Transformer factura_transformer = null; 
 private Transformer facturas_transformer = null; 

 public void init(ServletConfig config)
 {
	  super.init();
	  ResourceBundle resource = ResourceBundle.getBundle("net/idtoki/serteca/app/config/app-config");
	  File factura = new File(resource.getString("app.xsl.templates.dir")+"/PdfFactura.xslt");
	  Source xslSource = new StreamSource(factura);
	  File facturas = new File(resource.getString("app.xsl.templates.dir")+"/PdfListaFactura.xslt");
	  Source xslSourceT = new StreamSource(facturas); 	  
	  try{
		  factura_transformer = tFactory.newTransformer(xslSource);
		  facturas_transformer = tFactory.newTransformer(xslSourceT);		  
	  }catch (Exception e){
	    e.printStackTrace();
	  } 
 }
 
 public void serviceAddFactura(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
	 utf8RequestService(request);
	 try
	 {
		 String estado =  WebUtils.getStringParam(request, "Facturas.ESTADO");
		 String [] valor= estado.split("-");
		 Facturas fa = FacturasHelper.createObj(request);
		 fa.setEstado(new Integer(valor[0]).intValue());
		 fa.setFechaIni(FormatUtils.ddmmaaaa2aaaammdd(fa.getFechaIni(),"-",""));
		 FacturasGroupBean cgb = new FacturasGroupBean();
		 cgb.setElemento(fa);
		 cgb.save();
	 }
	 catch(TorqueException te)
	 {
		 response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
	 }
 } 
 
 public StringBuffer replaceStringBuffer (StringBuffer strBA, String strOrigen, String strDestino) 
 {
	 return new StringBuffer(strBA.toString().replaceAll(strOrigen,strDestino));
 } 
 
 private Criteria ordenacion(Criteria c,String CampoOrdenacion,String OrdenOrdenacion) 
 { 
 	if((OrdenOrdenacion != null )&& (OrdenOrdenacion.compareTo("ASC")==0))
 		if ((CampoOrdenacion != null))
 		{
 			c.addAscendingOrderByColumn(CampoOrdenacion.toString());
 		}
 	if  ((OrdenOrdenacion != null) && (OrdenOrdenacion.compareTo("DESC")==0))
 		if ((CampoOrdenacion != null))
 			{
 			c.addDescendingOrderByColumn(CampoOrdenacion.toString());
 		}
 	return c;
 }
 
 private Criteria filtro(Criteria c,int filtro) 
 { 
 	 switch (filtro)
 	 {
	  case 1:
		  c.add(FacturasPeer.ESTADO,0);
		  break;
	  case 2:
		  c.add(FacturasPeer.ESTADO,1);
		  break;
	  case 3:
		  c.add(FacturasPeer.ESTADO,2);
		  break;
	 default:
	 	 break;  
 	 }
 	return c;
 }
 
 private Criteria criteriaFacturasTableContent(HttpServletRequest request,Criteria c) throws IOException, ServletException
 {
	 String param =  WebUtils.getStringParam(request, new ClienteHelper().getIdName());
	 if(param != null)
		 TorqueUtils.addEqualCriteria(c,FacturasPeer.CLIENTE_ID,param);	
	 param =  WebUtils.getStringParam(request, new ReparacionHelper().getIdName());
	 if(param != null)
		 TorqueUtils.addEqualCriteria(c,FacturasPeer.REPARACION_ID,param);			 
 	  String paramSortCol =  WebUtils.getStringParam(request, "sort_col");
 	  String paramSortDir =  WebUtils.getStringParam(request, "sort_dir");
  	  int paramFiltro =  WebUtils.getintParam(request, "filtro");
	  c = ordenacion(c,paramSortCol,paramSortDir);
	  c = filtro(c,paramFiltro);
	  
 	  return c;
 }  
 
 public void  serviceFacturaTableContent(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
	 utf8RequestService(request);
	 int numElemPedidosBD = 40;
	 int gap = 0;//gap = viewedRows - numElemVisiblesUltPag	  
	 DinamicGridBean dgb = WebUtils.getDinamicGridBeanParam(request,numElemPedidosBD,gap);
	 Criteria c =FacturasManager.buildSearchCriteria(dgb);
	 c =criteriaFacturasTableContent(request,c);
	 
	 FacturasGroupBean cgb = FacturasManager.getFacturass(c);
	 dgb.setTotalSize(cgb.getTotalSize());
	  
	 String[] methodos= new String[] {
			 FacturasHelper.CLIENTE_ID_GET_METHOD_NAME+"FacturasParsed",
			 FacturasHelper.REPARACION_ID_GET_METHOD_NAME+"FacturasParsed",
			 FacturasHelper.FECHA_GET_METHOD_NAME+"FacturasParsed",
			 FacturasHelper.IMPORTE_GET_METHOD_NAME+"FacturasParsed",
			 "getImporteCalculadoFacturasParsed",
			 FacturasHelper.ESTADO_GET_METHOD_NAME+"FacturasParsedLabel",
			 "getEditFactura",
			 "getDeleteFactura"			 
			 };
	  
	 xmlResponseService(response,AjaxUtils.buildXmlAjaxResponseTableContentFromListObj(
			  										cgb.getAlmacen(),
			  										methodos,
			  										FacturasHelper.ID_GET_METHOD_NAME, dgb,"ISO-8859-1")); 
 } 
 
 public void serviceFacturaUlContent(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
	 utf8RequestService(request);
	 String[] methodos= new String[] {
			 FacturasHelper.ID_GET_METHOD_NAME, 
			 FacturasHelper.CLIENTE_ID_GET_METHOD_NAME+"FacturasParsed",
			 FacturasHelper.REPARACION_ID_GET_METHOD_NAME+"FacturasParsed"			 
			 };
	 String param =  WebUtils.getStringParam(request, "value");
	 if(param==null || param.length() <= 0)
			 param =  WebUtils.getStringParam(request, new LineaFacturaHelper().getFacturaIdName());
	 FacturasGroupBean cgb = FacturasManager.getFacturass(FacturasManager.buildSearchCriteria(param));
	 simpleResponseService(response, AjaxUtils.buildAjaxULContentFromListObj(cgb.getAlmacen(),methodos, FacturasHelper.COMPLEX_ID_GET_METHOD,"Facturas"));
 } 
 
 public void serviceEstadoFacturaUlContent(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
	 utf8RequestService(request);
	 String cadena="<ul><li>0-Emitida</li><li>1-Pendiente</li><li>2-Cobrada</li></ul>";
	 response.getWriter().print(cadena);
 } 
 
 
 protected StringBuffer updateClienteIdResponseCallBack(String s)
 {
  ArrayList a = AjaxUtils.splitIdFields(s);
	return new StringBuffer(FacturasManager.getFacturas(
		Integer.parseInt(a.get(0).toString())).getClienteIdFacturasParsed());

 } 
 
 protected StringBuffer updateImporteResponseCallBack(String s)
 {
  ArrayList a = AjaxUtils.splitIdFields(s);
	return new StringBuffer(FacturasManager.getFacturas(
		Integer.parseInt(a.get(0).toString())).getImporteFacturasParsed());
 } 
 
 protected StringBuffer updateReparacionIdResponseCallBack(String s)
 {
  ArrayList a = AjaxUtils.splitIdFields(s);
	return new StringBuffer(FacturasManager.getFacturas(
		Integer.parseInt(a.get(0).toString())).getReparacionIdFacturasParsed());

 }  
 protected String updateImporteRequestCallBack(String value)
 {
	 String importe="0";
	 if (value.compareTo("")!=0)
		 importe=value;
  return importe;
  }

 public void serviceDeleteFactura(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
	 int idBorrar=-1;
	 idBorrar=WebUtils.getintParam(request, "borrarId");
	 if (idBorrar!=-1)
		 if (FacturasManager.borraFactura(idBorrar))
			 WebUtils.writeXmlResponse(response,XmlUtils.buildXmlOKResponse("ISO-8859-1"));
		 else
			 WebUtils.writeXmlResponse(response,XmlUtils.buildXmlNotOKResponse("ISO-8859-1"));			 
 }  
 
 public void serviceFacturaElement(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
  
  StringBuffer cadena=null;
  Criteria c= new Criteria();
  int claveId=-1;
  claveId=WebUtils.getintParam(request, "facturas.ID");
  if (claveId!=-1)
  {
	  c.add(FacturasPeer.ID, claveId);
  }
  c.addAscendingOrderByColumn(FacturasPeer.ID);
  FacturasGroupBean trgb = FacturasManager.getFacturass(c);
  
  if (trgb.getTotalSize()!=0)
  {
	  String [] parametros={
				 FacturasHelper.ID_GET_METHOD_NAME,
				 FacturasHelper.CLIENTE_ID_GET_METHOD_NAME+"FacturasParsed",
				 FacturasHelper.REPARACION_ID_GET_METHOD_NAME+"FacturasParsed",
				 FacturasHelper.FECHA_GET_METHOD_NAME+"FacturasParsed",
				 FacturasHelper.OBSERVACION_GET_METHOD_NAME+"FacturasParsed",
				 FacturasHelper.IMPORTE_GET_METHOD_NAME+"FacturasParsed",
				 FacturasHelper.ESTADO_GET_METHOD_NAME+"FacturasParsed",
				 FacturasHelper.DESCRIPCION_GET_METHOD_NAME+"FacturasParsed",
				 "getImporteCalculadoFacturasParsed"
	  			};
	  cadena=trgb.buildXml(parametros,null,"ISO-8859-1");
  }
  xmlResponseService(response, cadena);
 }  
 
 public void serviceFacturaCliente(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
  String cadena=null;
  Criteria c= new Criteria();
  int claveId=-1;
  claveId=WebUtils.getintParam(request, "Clientes.ID");
  if (claveId!=-1)
  {
	  c.add(ClientePeer.ID, claveId);
  }
  c.addAscendingOrderByColumn(ClientePeer.ID);
  ClienteGroupBean trgb = ClienteManager.getClientes(c);
  
  if (trgb.getTotalSize()!=0)
  {
	  cadena = "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" ?>";
  	  cadena = cadena + "<result><Facturas.CLIENTE_ID>" + trgb.getCliente(0).getId() + "-" + trgb.getCliente(0).getNombreClienteParsed() + "</Facturas.CLIENTE_ID></result>";
  }
  
  xmlResponseService(response, new StringBuffer(cadena));
 } 

 
 public void serviceEstadoFactura(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
  String cadena=null;
  Criteria c= new Criteria();
  int claveId=-1;
  claveId=WebUtils.getintParam(request, "Facturas.ESTADO");
  if (claveId!=-1)
  {
	  c.add(FacturasPeer.ESTADO, claveId);
  }
  c.addAscendingOrderByColumn(FacturasPeer.ESTADO);
  FacturasGroupBean fgb = FacturasManager.getFacturass(c);
  
  if (fgb.getTotalSize()!=0)
  {
	  cadena = "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" ?>";
  	  cadena = cadena + "<result><Facturas.ESTADO>" + fgb.getFacturas(0).getEstadoFacturasParsed() + "</Facturas.ESTADO></result>";
  }
  
  xmlResponseService(response, new StringBuffer(cadena));
 }  

 
 public void serviceFacturaReparacion(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
  String cadena=null;
  Criteria c= new Criteria();
  int claveId=-1;
  claveId=WebUtils.getintParam(request, "Reparaciones.ID");
  if (claveId!=-1)
  {
	  c.add(ReparacionPeer.ID, claveId);
  }
  c.addAscendingOrderByColumn(ReparacionPeer.ID);
  ReparacionGroupBean trgb = ReparacionManager.getReparacions(c);
  
  if (trgb.getTotalSize()!=0)
  {
	  cadena = "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" ?>";
  	  cadena = cadena + "<result><Facturas.REPARACION_ID>" + trgb.getReparacion(0).getId() + "-" + trgb.getReparacion(0).getVehiculoIdReparacionParsed() + "</Facturas.REPARACION_ID></result>";
  }
  
  xmlResponseService(response, new StringBuffer(cadena));
 }  
 
 public void serviceGetFacturaDetalleXml (HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
	 utf8RequestService(request);
	 String[] getMethodos= new String[] {
			 FacturasHelper.ID_GET_METHOD_NAME,
			 FacturasHelper.CLIENTE_ID_GET_METHOD_NAME+"FacturasParsed",
			 FacturasHelper.REPARACION_ID_GET_METHOD_NAME+"FacturasParsed",
			 FacturasHelper.FECHA_GET_METHOD_NAME+"FacturasParsed",
			 FacturasHelper.OBSERVACION_GET_METHOD_NAME+"FacturasParsed",
			 FacturasHelper.IMPORTE_GET_METHOD_NAME+"FacturasParsed",
			 "getImporteCalculadoFacturasParsed",
			 FacturasHelper.ESTADO_GET_METHOD_NAME+"FacturasParsed",
			 FacturasHelper.DESCRIPCION_GET_METHOD_NAME+"FacturasParsed"
			 };
	  
	 
	 FacturasGroupBean tgb = new FacturasGroupBean();
	 try
	{
		tgb.setElemento(FacturasHelper.getFacturas(request));
	} catch (TorqueException e)
	{
		logger.severe(e.getMessage());
	}
	 xmlResponseService(response,tgb.buildXml(getMethodos, null,"ISO-8859-1"));
 }
 
 public void serviceGetFacturaDetallePdf(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
	 utf8RequestService(request);
	 String[] getMethodos= new String[] {
			 FacturasHelper.ID_GET_METHOD_NAME,
			 FacturasHelper.CLIENTE_ID_GET_METHOD_NAME+"FacturasParsed",
			 FacturasHelper.REPARACION_ID_GET_METHOD_NAME+"FacturasParsed",
			 FacturasHelper.FECHA_GET_METHOD_NAME+"FacturasParsed",
			 FacturasHelper.IMPORTE_GET_METHOD_NAME+"FacturasParsed",
			 "getImporteCalculadoFacturasParsed",
			 FacturasHelper.ESTADO_GET_METHOD_NAME+"FacturasParsed"
			 };
	  
	 
	 FacturasGroupBean tgb = new FacturasGroupBean();
	 try
	{
		tgb.setElemento(FacturasHelper.getFacturas(request));
	} catch (TorqueException e)
	{
		logger.severe(e.getMessage());
	}
	
	 byte[] content =  PdfUtils.getBytes(replaceStringBuffer(tgb.buildXml(getMethodos, null,"ISO-8859-1"),"n/a"," "), factura_transformer,"ISO-8859-1");
	   response.addHeader("content-disposition","attachment;filename=facturaDetalle.pdf");
	   response.setContentType("application/pdf");
	   response.setHeader("Cache-Control", "");//para que funcione en IE
	   response.setContentLength(content.length);
	   response.getOutputStream().write(content);
	   response.getOutputStream().flush();  
	   response.getOutputStream().close();
	
 }   
 
 public void serviceFacturaTableContentPdf(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
	 utf8RequestService(request);
  Criteria c= new Criteria();
  String paramQuery =  WebUtils.getStringParam(request, "query");
  if ((paramQuery != null)&& (paramQuery.compareTo("")!=0) )
	  c = FacturasManager.buildSearchCriteria(paramQuery);   
  c =criteriaFacturasTableContent(request,c); 
  FacturasGroupBean tgb = FacturasManager.getFacturass(c);
  
  String[] methodos= new String[] {	
			 FacturasHelper.CLIENTE_ID_GET_METHOD_NAME+"FacturasParsed",
			 FacturasHelper.REPARACION_ID_GET_METHOD_NAME+"FacturasParsed",
			 FacturasHelper.FECHA_GET_METHOD_NAME+"FacturasParsed",
			 FacturasHelper.OBSERVACION_GET_METHOD_NAME+"FacturasParsed",
			 FacturasHelper.IMPORTE_GET_METHOD_NAME+"FacturasParsed",
			 "getImporteCalculadoFacturasParsed",
			 FacturasHelper.ESTADO_GET_METHOD_NAME+"FacturasParsed",
			 FacturasHelper.DESCRIPCION_GET_METHOD_NAME+"FacturasParsed"
			};
  
	 byte[] content =  PdfUtils.getBytes(replaceStringBuffer(tgb.buildXml(methodos, null,"ISO-8859-1"),"n/a"," "), facturas_transformer,"ISO-8859-1");
	   response.addHeader("content-disposition","attachment;filename=ListaFactura.pdf");
	   response.setContentType("application/pdf");
	   response.setHeader("Cache-Control", "");//para que funcione en IE
	   response.setContentLength(content.length);
	   response.getOutputStream().write(content);
	   response.getOutputStream().flush();  
	   response.getOutputStream().close();
 }   
 
}


