package net.idtoki.serteca.controller;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.ResourceBundle;
import java.util.Vector;
import java.util.logging.Logger;

import javax.servlet.ServletConfig;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.xml.transform.Source;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.stream.StreamSource;

import net.idtoki.serteca.group.ClienteGroupBean;
import net.idtoki.serteca.group.FormaPagoGroupBean;
import net.idtoki.serteca.group.LocalidadGroupBean;
import net.idtoki.serteca.helper.ClienteHelper;
import net.idtoki.serteca.helper.FacturasHelper;
import net.idtoki.serteca.helper.PrestamoHelper;
import net.idtoki.serteca.helper.VehiculoHelper;
import net.idtoki.serteca.manager.ClienteManager;
import net.idtoki.serteca.manager.FormaPagoManager;
import net.idtoki.serteca.manager.LocalidadManager;
import net.idtoki.serteca.model.Cliente;
import net.idtoki.serteca.model.ClientePeer;
import net.idtoki.serteca.model.FacturasPeer;
import net.idtoki.serteca.model.FormaPagoPeer;
import net.idtoki.serteca.model.LocalidadPeer;
import net.zylk.tools.ajax.AjaxUtils;
import net.zylk.tools.ajax.AjaxUtils.DinamicGridBean;
import net.zylk.tools.pdf.PdfUtils;
import net.zylk.tools.xml.XmlUtils;
import net.zylk.web.WebUtils;

import org.apache.torque.TorqueException;
import org.apache.torque.util.Criteria;

/**
 * The skeleton for this class was autogenerated by Torque on:
 *
 * [Wed Feb 01 12:46:43 CET 2006]
 *
 *  You should add additional methods to this class to meet the
 *  application requirements.  This class will only be generated as
 *  long as it does not already exist in the output directory.
 */
public class ClienteController
    extends net.idtoki.serteca.controller.BaseClienteController
{
 private static final Logger logger = Logger.getLogger("net.idtoki.serteca.controller.ClienteController");
 private TransformerFactory tFactory = TransformerFactory.newInstance();
 private Transformer cliente_transformer = null; 
 private Transformer clientes_transformer = null; 

 public void init(ServletConfig config)
 {
	  super.init();
	  ResourceBundle resource = ResourceBundle.getBundle("net/idtoki/serteca/app/config/app-config");
	  File cliente = new File(resource.getString("app.xsl.templates.dir")+"/PdfCliente.xslt");
	  Source xslSource = new StreamSource(cliente);
	  File clientes = new File(resource.getString("app.xsl.templates.dir")+"/PdfListaCliente.xslt");
	  Source xslSourceT = new StreamSource(clientes);  	  
	  try{
		  cliente_transformer = tFactory.newTransformer(xslSource);
		  clientes_transformer = tFactory.newTransformer(xslSourceT);
	  }catch (Exception e){
	    e.printStackTrace();
	  } 
 }
 
 
 public void serviceAddCliente(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
		//recojo los parametros del formulario y doy de alta un nuevo Cliente
	 utf8RequestService(request);
	 try
	 {
		 Cliente cl = ClienteHelper.createObj(request);
		 ClienteGroupBean cgb = new ClienteGroupBean();
		 cgb.setElemento(cl);
		 cgb.save();
	 }
	 catch(TorqueException te)
	 {
		 response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
	 }
 }
 
 public StringBuffer replaceStringBuffer (StringBuffer strBA, String strOrigen, String strDestino) 
 {
	 return new StringBuffer(strBA.toString().replaceAll(strOrigen,strDestino));
 } 
 
 private Criteria ordenacion(Criteria c,String CampoOrdenacion,String OrdenOrdenacion) 
 { 
 	if((OrdenOrdenacion != null )&& (OrdenOrdenacion.compareTo("ASC")==0))
 		if ((CampoOrdenacion != null)) //&& (CampoOrdenacion.compareTo("nombre")==0))
 		{
 			//c.clear();
 			c.addAscendingOrderByColumn(CampoOrdenacion.toString());
 		}
 	if  ((OrdenOrdenacion != null) && (OrdenOrdenacion.compareTo("DESC")==0))
 		if ((CampoOrdenacion != null)) //&& (CampoOrdenacion.compareTo("nombre")==0))
 			{
 			//c.clear();
 			c.addDescendingOrderByColumn(CampoOrdenacion.toString());
 		}
 	return c;
 }

 private Criteria filtro(Criteria c,int filtro) 
 { 
 	 switch (filtro)
 	 {
	  case 1:
		  //aquí se filtarían lo que tienen impagos
			 ClienteGroupBean cgb = ClienteManager.getClientes();
			 int [] arrclaves=new int [cgb.getTotalSize()];
			 int i;
			 for (i=0;i<cgb.getTotalSize();i++)
			 {
				 Cliente cl=(Cliente)cgb.get(i);
				 if (new Float(cl.getImportePendienteClienteParsed()).floatValue()>0)
				 {
					 arrclaves[i]=cl.getId();
				 }
			 }
			 c.addIn(ClientePeer.ID, arrclaves);
		  break;
	 default:
		 //El caso de querer ver todos
	 	 break;  
 	 }
 	return c;
 }
 
 private Criteria criteriaClienteTableContent(HttpServletRequest request,Criteria c) throws IOException, ServletException
 {	 
 	  String paramSortCol =  WebUtils.getStringParam(request, "sort_col");
 	  String paramSortDir =  WebUtils.getStringParam(request, "sort_dir");
 	  //System.out.println("----query:"+paramQuery+"----col:"+paramSortCol+"----dir:"+paramSortDir+"----filtro:"+paramFiltro);
 	  int paramFiltro =  WebUtils.getintParam(request, "filtro");
 	  c = ordenacion(c,paramSortCol,paramSortDir);
	  c = filtro(c,paramFiltro);

 	  return c;
 } 
 
 public void  serviceClienteTableContent(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
	 utf8RequestService(request);
	 int numElemPedidosBD = 40;
	 int gap = 0;//gap = viewedRows - numElemVisiblesUltPag	  
	 DinamicGridBean dgb = WebUtils.getDinamicGridBeanParam(request,numElemPedidosBD,gap); 
	 Criteria c =ClienteManager.buildSearchCriteria(dgb);
	 c =criteriaClienteTableContent(request,c);
	 ClienteGroupBean cgb = ClienteManager.getClientes(c);
	 dgb.setTotalSize(cgb.getTotalSize());
	  
	 String[] methodos= new String[] {
			 ClienteHelper.NIF_GET_METHOD_NAME+"ClienteParsed",
			 ClienteHelper.NOMBRE_GET_METHOD_NAME+"ClienteParsed",
			 ClienteHelper.NOMBRECOMERCIAL_GET_METHOD_NAME+"ClienteParsed",
			 ClienteHelper.DIRECCION_GET_METHOD_NAME+"ClienteParsed",
			 ClienteHelper.TELEFONO_GET_METHOD_NAME+"ClienteParsed",
			 ClienteHelper.MOVIL_GET_METHOD_NAME+"ClienteParsed",
			 "getEditCliente",
			 "getDeleteCliente"};
	  
	 xmlResponseService(response,AjaxUtils.buildXmlAjaxResponseTableContentFromListObj(
			  										cgb.getAlmacen(),
			  										methodos,
			  										ClienteHelper.ID_GET_METHOD_NAME, dgb,"ISO-8859-1")); 
 }
 
 /*
 public void  serviceClienteImpagadoTableContent(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
	 utf8RequestService(request);
	 int numElemPedidosBD = 40;
	 int gap = 0;//gap = viewedRows - numElemVisiblesUltPag	  
	 DinamicGridBean dgb = WebUtils.getDinamicGridBeanParam(request,numElemPedidosBD,gap); 
	 ClienteGroupBean cgb = ClienteManager.getClientes();
	 int [] arrclaves=new int [cgb.getTotalSize()];
	 int i;
	 for (i=0;i<cgb.getTotalSize();i++)
	 {
		 Cliente cl=(Cliente)cgb.get(i);
		 if (new Float(cl.getImportePendienteClienteParsed()).floatValue()>0)
		 {
			 arrclaves[i]=cl.getId();
		 }
	 }
	 Criteria c =ClienteManager.buildSearchCriteria(dgb);
	 c =criteriaClienteTableContent(request,c);
	 c.andIn(ClientePeer.ID, arrclaves);
     ClienteGroupBean elem=ClienteManager.getClientes(c);	 
	 dgb.setTotalSize(elem.getTotalSize());
	 String[] methodos= new String[] {
			 ClienteHelper.NIF_GET_METHOD_NAME+"ClienteParsed",
			 ClienteHelper.NOMBRE_GET_METHOD_NAME+"ClienteParsed",
			 ClienteHelper.NOMBRECOMERCIAL_GET_METHOD_NAME+"ClienteParsed",
			 ClienteHelper.DIRECCION_GET_METHOD_NAME+"ClienteParsed",
			 ClienteHelper.TELEFONO_GET_METHOD_NAME+"ClienteParsed",
			 ClienteHelper.MOVIL_GET_METHOD_NAME+"ClienteParsed",
			 "getImportePendienteClienteParsed"
			 };
	 xmlResponseService(response,AjaxUtils.buildXmlAjaxResponseTableContentFromListObj(
			  										elem.getAlmacen(),
			  										methodos,
			  										ClienteHelper.ID_GET_METHOD_NAME, dgb,"ISO-8859-1")); 
 }
 */
 public void serviceClienteUlContent(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
	 utf8RequestService(request);
	 String[] methodos= new String[] {
			 ClienteHelper.ID_GET_METHOD_NAME, 
			 ClienteHelper.NOMBRE_GET_METHOD_NAME+"ClienteParsed"
			 };
	 String param =  WebUtils.getStringParam(request, "value");
	 if(param==null || param.length() <= 0)
			 param =  WebUtils.getStringParam(request, new VehiculoHelper().getClienteIdName());
	 if(param==null || param.length() <= 0)
		 	param =  WebUtils.getStringParam(request, new FacturasHelper().getClienteIdName());	 
	 ClienteGroupBean cgb = ClienteManager.getClientes(ClienteManager.buildSearchCriteria(param));
	 simpleResponseService(response, AjaxUtils.buildAjaxULContentFromListObj(cgb.getAlmacen(),methodos, ClienteHelper.COMPLEX_ID_GET_METHOD,"Cliente"));
 }
 
 protected StringBuffer updateLocalidadIdResponseCallBack(String s)
 {
  ArrayList a = AjaxUtils.splitIdFields(s);
    	return new StringBuffer(ClienteManager.getCliente(Integer.parseInt(a.get(0).toString())).getLocalidadIdClienteParsed());
   } 
 
 protected StringBuffer updateNombreComercialResponseCallBack(String s)
 {
  ArrayList a = AjaxUtils.splitIdFields(s);
    	return new StringBuffer(ClienteManager.getCliente(Integer.parseInt(a.get(0).toString())).getNombreComercialClienteParsed());
   }  
 
 protected StringBuffer updateDireccionResponseCallBack(String s)
   {
	   ArrayList a = AjaxUtils.splitIdFields(s);
	     	return new StringBuffer(ClienteManager.getCliente(Integer.parseInt(a.get(0).toString())).getDireccionClienteParsed());
	    } 
 
 protected StringBuffer updateTlfnoResponseCallBack(String s)
   {
	   ArrayList a = AjaxUtils.splitIdFields(s);
	     	return new StringBuffer(ClienteManager.getCliente(Integer.parseInt(a.get(0).toString())).getTlfnoClienteParsed());
	    } 
 protected StringBuffer updateMovilResponseCallBack(String s)
 {
	   ArrayList a = AjaxUtils.splitIdFields(s);
	     	return new StringBuffer(ClienteManager.getCliente(Integer.parseInt(a.get(0).toString())).getMovilClienteParsed());
	    } 
 public void serviceDeleteCliente(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
	 int idBorrar=-1;
	 idBorrar=WebUtils.getintParam(request, "borrarId");
	 if (idBorrar!=-1)
		 if (ClienteManager.borraCliente(idBorrar))
			 WebUtils.writeXmlResponse(response,XmlUtils.buildXmlOKResponse("ISO-8859-1"));
		 else
			 WebUtils.writeXmlResponse(response,XmlUtils.buildXmlNotOKResponse("ISO-8859-1"));			 
 } 
 
 public void serviceClienteElement(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
  StringBuffer cadena=null;
  Criteria c= new Criteria();
  int claveId=-1;
  claveId=WebUtils.getintParam(request, "clientes.ID");
  if (claveId!=-1)
  {
	  c.add(ClientePeer.ID, claveId);
  }
  c.addAscendingOrderByColumn(ClientePeer.ID);
  ClienteGroupBean trgb = ClienteManager.getClientes(c);
  
  if (trgb.getTotalSize()!=0)
  {
	  String [] parametros={
			  ClienteHelper.ID_GET_METHOD_NAME,
				 ClienteHelper.NIF_GET_METHOD_NAME+"ClienteParsed",
				 ClienteHelper.NOMBRE_GET_METHOD_NAME+"ClienteParsed",
				 ClienteHelper.NOMBRECOMERCIAL_GET_METHOD_NAME+"ClienteParsed",
				 ClienteHelper.RAZONSOCIAL_GET_METHOD_NAME+"ClienteParsed",
				 ClienteHelper.LOCALIDAD_ID_GET_METHOD_NAME+"ClienteParsed",
				 ClienteHelper.DIRECCION_GET_METHOD_NAME+"ClienteParsed",
				 ClienteHelper.CP_GET_METHOD_NAME+"ClienteParsed",
				 ClienteHelper.TELEFONO_GET_METHOD_NAME+"ClienteParsed",
				 ClienteHelper.MOVIL_GET_METHOD_NAME+"ClienteParsed",
				 ClienteHelper.FAX_GET_METHOD_NAME+"ClienteParsed",
				 ClienteHelper.EMAIL_GET_METHOD_NAME+"ClienteParsed",
				 ClienteHelper.FORMA_PAGO_ID_GET_METHOD_NAME+"ClienteParsed",
				 ClienteHelper.NUMERO_CUENTA_GET_METHOD_NAME+"ClienteParsed",
				 ClienteHelper.DTO_PRONTO_PAGO_GET_METHOD_NAME+"ClienteParsed",
				 ClienteHelper.DIA_PAGO_GET_METHOD_NAME+"ClienteParsed",
				 ClienteHelper.OBSERVACION_GET_METHOD_NAME+"ClienteParsed",
				 "getImporteCobradoClienteParsed",
				 "getImportePendienteClienteParsed"
	  			};
	  cadena=trgb.buildXml(parametros,null,"ISO-8859-1");
  }
  xmlResponseService(response, cadena);
 } 
 
 public void serviceClienteLocalidad(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
  String cadena=null;
  Criteria c= new Criteria();
  int claveId=-1;
  claveId=WebUtils.getintParam(request, "Localidades.ID");
  if (claveId!=-1)
  {
	  c.add(LocalidadPeer.ID, claveId);
  }
  c.addAscendingOrderByColumn(LocalidadPeer.ID);
  LocalidadGroupBean trgb = LocalidadManager.getLocalidads(c);
  
  if (trgb.getTotalSize()!=0)
  {
	  cadena = "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" ?>";
  	  cadena = cadena + "<result><Clientes.LOCALIDAD_ID>" + trgb.getLocalidad(0).getId() + "-" + trgb.getLocalidad(0).getNombreLocalidadParsed() + "</Clientes.LOCALIDAD_ID></result>";
  }
  
  xmlResponseService(response, new StringBuffer(cadena));
 }  
 

 public void serviceClienteFormaPago(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
  String cadena=null;
  Criteria c= new Criteria();
  int claveId=-1;
  claveId=WebUtils.getintParam(request, "Formas_Pago.ID");
  if (claveId!=-1)
  {
	  c.add(FormaPagoPeer.ID, claveId);
  }
  c.addAscendingOrderByColumn(FormaPagoPeer.ID);
  FormaPagoGroupBean trgb = FormaPagoManager.getFormaPagos(c);
  
  if (trgb.getTotalSize()!=0)
  {
	  cadena = "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" ?>";
  	  cadena = cadena + "<result><Clientes.FORMA_PAGO_ID>" + trgb.getFormaPago(0).getId() + "-" + trgb.getFormaPago(0).getNombreFormaPagoParsed() + "</Clientes.FORMA_PAGO_ID></result>";
  }
  
  xmlResponseService(response, new StringBuffer(cadena));
 }  
 
 public void serviceGetClienteDetalleXml (HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
	 utf8RequestService(request);
	 String[] getMethodos= new String[] {
			  ClienteHelper.ID_GET_METHOD_NAME,
				 ClienteHelper.NOMBRE_GET_METHOD_NAME+"ClienteParsed",
				 ClienteHelper.NIF_GET_METHOD_NAME+"ClienteParsed",
				 ClienteHelper.LOCALIDAD_ID_GET_METHOD_NAME+"ClienteParsed",
				 ClienteHelper.DIRECCION_GET_METHOD_NAME+"ClienteParsed",
				 ClienteHelper.CP_GET_METHOD_NAME+"ClienteParsed"
			 };
	  
	 
	 ClienteGroupBean tgb = new ClienteGroupBean();
	 try
	{
		tgb.setElemento(ClienteHelper.getCliente(request));
	} catch (TorqueException e)
	{
		logger.severe(e.getMessage());
	}
	 xmlResponseService(response,tgb.buildXml(getMethodos, null,"ISO-8859-1"));
 }
 
 
 public void serviceGetClienteDetallePdf(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
	 utf8RequestService(request);
	 String[] getMethodos= new String[] {
			  ClienteHelper.ID_GET_METHOD_NAME,
				 ClienteHelper.NIF_GET_METHOD_NAME+"ClienteParsed",
				 ClienteHelper.NOMBRE_GET_METHOD_NAME+"ClienteParsed",
				 ClienteHelper.NOMBRECOMERCIAL_GET_METHOD_NAME+"ClienteParsed",
				 ClienteHelper.RAZONSOCIAL_GET_METHOD_NAME+"ClienteParsed",
				 ClienteHelper.LOCALIDAD_ID_GET_METHOD_NAME+"ClienteParsed",
				 ClienteHelper.DIRECCION_GET_METHOD_NAME+"ClienteParsed",
				 ClienteHelper.CP_GET_METHOD_NAME+"ClienteParsed",
				 ClienteHelper.TELEFONO_GET_METHOD_NAME+"ClienteParsed",
				 ClienteHelper.MOVIL_GET_METHOD_NAME+"ClienteParsed",
				 ClienteHelper.FAX_GET_METHOD_NAME+"ClienteParsed",
				 ClienteHelper.EMAIL_GET_METHOD_NAME+"ClienteParsed",
				 ClienteHelper.FORMA_PAGO_ID_GET_METHOD_NAME+"ClienteParsed",
				 ClienteHelper.NUMERO_CUENTA_GET_METHOD_NAME+"ClienteParsed",
				 ClienteHelper.DTO_PRONTO_PAGO_GET_METHOD_NAME+"ClienteParsed",
				 ClienteHelper.DIA_PAGO_GET_METHOD_NAME+"ClienteParsed",
				 "getImporteCobradoClienteParsed",
				 "getImportePendienteClienteParsed"
			 };
	  
	 
	 ClienteGroupBean tgb = new ClienteGroupBean();
	 try
	{
		tgb.setElemento(ClienteHelper.getCliente(request));
	} catch (TorqueException e)
	{
		logger.severe(e.getMessage());
	}
	
	 byte[] content =  PdfUtils.getBytes(replaceStringBuffer(tgb.buildXml(getMethodos, null,"ISO-8859-1"),"n/a"," "), cliente_transformer,"ISO-8859-1");
	   response.addHeader("content-disposition","attachment;filename=clienteDetalle.pdf");
	   response.setHeader("Cache-Control", "");//para que funcione en IE
	   response.setContentType("application/pdf");
	   response.setContentLength(content.length);
	   response.getOutputStream().write(content);
	   response.getOutputStream().flush();
	
 }  
 
 public void serviceClienteTableContentPdf(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
	 utf8RequestService(request);
  Criteria c= new Criteria();
  String paramQuery =  WebUtils.getStringParam(request, "query");
  if ((paramQuery != null)&& (paramQuery.compareTo("")!=0) )
	  c = ClienteManager.buildSearchCriteria(paramQuery);   
  c =criteriaClienteTableContent(request,c);
  ClienteGroupBean tgb = ClienteManager.getClientes(c);
  
  String[] methodos= new String[] {	
			 ClienteHelper.NIF_GET_METHOD_NAME+"ClienteParsed",
			 ClienteHelper.NOMBRE_GET_METHOD_NAME+"ClienteParsed",
			 ClienteHelper.NOMBRECOMERCIAL_GET_METHOD_NAME+"ClienteParsed",
			 ClienteHelper.DIRECCION_GET_METHOD_NAME+"ClienteParsed",
			 ClienteHelper.TELEFONO_GET_METHOD_NAME+"ClienteParsed",
			 ClienteHelper.MOVIL_GET_METHOD_NAME+"ClienteParsed"
			};
  
	 byte[] content =  PdfUtils.getBytes(replaceStringBuffer(tgb.buildXml(methodos, null,"ISO-8859-1"),"n/a"," "), clientes_transformer,"ISO-8859-1");
	   //response.setContentType("PDF_MIME_TYPE");
	   response.setContentType("application/pdf");
	   response.addHeader("content-disposition","attachment;filename=ListaCliente.pdf");
	   response.setHeader("Cache-Control", "");//para que funcione en IE
	   response.setContentLength(content.length);
	   response.getOutputStream().write(content);
	   response.getOutputStream().flush();  
	   response.getOutputStream().close();

 }  
 
}


