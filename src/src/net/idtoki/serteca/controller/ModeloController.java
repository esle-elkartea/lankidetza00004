package net.idtoki.serteca.controller;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.ResourceBundle;
import java.util.logging.Logger;

import javax.servlet.ServletConfig;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.xml.transform.Source;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.stream.StreamSource;

import net.idtoki.serteca.group.MarcaGroupBean;
import net.idtoki.serteca.group.ModeloGroupBean;
import net.idtoki.serteca.helper.MarcaHelper;
import net.idtoki.serteca.helper.ModeloHelper;
import net.idtoki.serteca.helper.VehiculoCortesiaHelper;
import net.idtoki.serteca.helper.VehiculoHelper;
import net.idtoki.serteca.manager.MarcaManager;
import net.idtoki.serteca.manager.ModeloManager;
import net.idtoki.serteca.model.MarcaPeer;
import net.idtoki.serteca.model.Modelo;
import net.idtoki.serteca.model.ModeloPeer;
import net.zylk.tools.ajax.AjaxUtils;
import net.zylk.tools.ajax.AjaxUtils.DinamicGridBean;
import net.zylk.tools.pdf.PdfUtils;
import net.zylk.tools.xml.XmlUtils;
import net.zylk.torque.TorqueUtils;
import net.zylk.web.WebUtils;

import org.apache.torque.TorqueException;
import org.apache.torque.util.Criteria;

/**
 * The skeleton for this class was autogenerated by Torque on:
 *
 * [Wed Feb 01 12:46:43 CET 2006]
 *
 *  You should add additional methods to this class to meet the
 *  application requirements.  This class will only be generated as
 *  long as it does not already exist in the output directory.
 */
public class ModeloController
    extends net.idtoki.serteca.controller.BaseModeloController
{
 private static final Logger logger = Logger.getLogger("net.idtoki.serteca.controller.ModeloController");
 private TransformerFactory tFactory = TransformerFactory.newInstance();
 private Transformer modelo_transformer = null; 
 private Transformer modelos_transformer = null;  

 public void init(ServletConfig config)
 {
	  super.init();
	  ResourceBundle resource = ResourceBundle.getBundle("net/idtoki/serteca/app/config/app-config");
	  File modelo = new File(resource.getString("app.xsl.templates.dir")+"/PdfModelo.xslt");
	  Source xslSource = new StreamSource(modelo);
	  File modelos = new File(resource.getString("app.xsl.templates.dir")+"/PdfListaModelo.xslt");
	  Source xslSourceT = new StreamSource(modelos); 	  
	  try{
		  modelo_transformer = tFactory.newTransformer(xslSource);
		  modelos_transformer = tFactory.newTransformer(xslSourceT);
	  }catch (Exception e){
	    e.printStackTrace();
	  }  
 }
 public void serviceAddModelo(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
		//recojo los parametros del formulario y doy de alta una nueva marca
	 try
	 {
		 utf8RequestService(request);
		 Modelo md = ModeloHelper.createObj(request);
		 ModeloGroupBean mgb = new ModeloGroupBean();
		 mgb.setElemento(md);
		 mgb.save();
	 }
	 catch(TorqueException te)
	 {
		 response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
	 }
 }
 
 public StringBuffer replaceStringBuffer (StringBuffer strBA, String strOrigen, String strDestino) 
 {
	 return new StringBuffer(strBA.toString().replaceAll(strOrigen,strDestino));
 } 
 
 private Criteria ordenacion(Criteria c,String CampoOrdenacion,String OrdenOrdenacion) 
 { 
 	if((OrdenOrdenacion != null )&& (OrdenOrdenacion.compareTo("ASC")==0))
 		if ((CampoOrdenacion != null)) //&& (CampoOrdenacion.compareTo("nombre")==0))
 		{
 			//c.clear();
 			c.addAscendingOrderByColumn(CampoOrdenacion.toString());
 		}
 	if  ((OrdenOrdenacion != null) && (OrdenOrdenacion.compareTo("DESC")==0))
 		if ((CampoOrdenacion != null)) //&& (CampoOrdenacion.compareTo("nombre")==0))
 			{
 			//c.clear();
 			c.addDescendingOrderByColumn(CampoOrdenacion.toString());
 		}
 	return c;
 }

 private Criteria criteriaModeloTableContent(HttpServletRequest request,Criteria c) throws IOException, ServletException
 {
	 String param =  WebUtils.getStringParam(request, new MarcaHelper().getIdName());
	 if(param != null)
		 TorqueUtils.addEqualCriteria(c,ModeloPeer.MARCA_ID,param);		 
 	  String paramSortCol =  WebUtils.getStringParam(request, "sort_col");
 	  String paramSortDir =  WebUtils.getStringParam(request, "sort_dir");
 	  //System.out.println("----query:"+paramQuery+"----col:"+paramSortCol+"----dir:"+paramSortDir+"----filtro:"+paramFiltro);

 	  c = ordenacion(c,paramSortCol,paramSortDir);
 	 c.addAscendingOrderByColumn(ModeloPeer.NOMBRE);
 	  return c;
 } 
 
 public void  serviceModeloTableContent(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
	 utf8RequestService(request);
	 int numElemPedidosBD = 40;
	 int gap = 0;//gap = viewedRows - numElemVisiblesUltPag	  
	 DinamicGridBean dgb = WebUtils.getDinamicGridBeanParam(request,numElemPedidosBD,gap); 
	 Criteria c =ModeloManager.buildSearchCriteria(dgb);
	 c =criteriaModeloTableContent(request,c);
	 

	 ModeloGroupBean mgb = ModeloManager.getModelos(c);
	 dgb.setTotalSize(mgb.getTotalSize());
	  
	 String[] methodos= new String[] {
				ModeloHelper.NOMBRE_GET_METHOD_NAME + "ModeloParsed",
				ModeloHelper.MARCA_ID_GET_METHOD_NAME + "ModeloParsed",
				"getEditModelo",
				"getDeleteModelo"
	 };
	  
	 xmlResponseService(response,AjaxUtils.buildXmlAjaxResponseTableContentFromListObj(
			  										mgb.getAlmacen(),
			  										methodos,
			  										ModeloHelper.ID_GET_METHOD_NAME, dgb,"ISO-8859-1")); 
 }

 public void serviceModeloUlContent(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
	 utf8RequestService(request);
	 String[] methodos= new String[] {
			 ModeloHelper.ID_GET_METHOD_NAME,
			 ModeloHelper.NOMBRE_GET_METHOD_NAME+"ModeloParsed"
			 };
	 String param =  WebUtils.getStringParam(request, "value");
	 if(param==null || param.length() <= 0)
		 param =  WebUtils.getStringParam(request, new VehiculoCortesiaHelper().getModeloIdName());	 
	 if(param==null || param.length() <= 0)
		param =  WebUtils.getStringParam(request, new VehiculoHelper().getModeloIdName());	 
	 ModeloGroupBean mgb = ModeloManager.getModelos(ModeloManager.buildSearchCriteria(param));
	 simpleResponseService(response, AjaxUtils.buildAjaxULContentFromListObj(mgb.getAlmacen(),methodos, ModeloHelper.COMPLEX_ID_GET_METHOD,"Modelo"));
 }
 
 public void serviceDeleteModelo(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
	 int idBorrar=-1;
	 idBorrar=WebUtils.getintParam(request, "borrarId");
	 if (idBorrar!=-1)
		 if (ModeloManager.borraModelo(idBorrar))
			 WebUtils.writeXmlResponse(response,XmlUtils.buildXmlOKResponse("ISO-8859-1"));
		 else
			 WebUtils.writeXmlResponse(response,XmlUtils.buildXmlNotOKResponse("ISO-8859-1"));			 
 } 
 
 public void serviceModeloElement(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
  StringBuffer cadena=null;
  Criteria c= new Criteria();
  int claveId=-1;
  claveId=WebUtils.getintParam(request, "modelos.ID");
  if (claveId!=-1)
  {
	  c.add(ModeloPeer.ID, claveId);
  }
  c.addAscendingOrderByColumn(ModeloPeer.ID);
  ModeloGroupBean trgb = ModeloManager.getModelos(c);
  
  if (trgb.getTotalSize()!=0)
  {
	  String [] parametros={
				ModeloHelper.ID_GET_METHOD_NAME, 
				ModeloHelper.NOMBRE_GET_METHOD_NAME + "ModeloParsed",
				ModeloHelper.MARCA_ID_GET_METHOD_NAME + "ModeloParsed"		  
	  			};
	  cadena=trgb.buildXml(parametros,null,"ISO-8859-1");
  }
  xmlResponseService(response, cadena);
 }  
 
 protected StringBuffer updateMarcaIdResponseCallBack(String s)
 {
  ArrayList a = AjaxUtils.splitIdFields(s);
    	return new StringBuffer(ModeloManager.getModelo(
    			Integer.parseInt(a.get(0).toString())).getMarcaIdModeloParsed());
   }
 
 public void serviceModeloMarca(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
  String cadena=null;
  Criteria c= new Criteria();
  int claveId=-1;
  claveId=WebUtils.getintParam(request, "Marcas.ID");
  if (claveId!=-1)
  {
	  c.add(MarcaPeer.ID, claveId);
  }
  c.addAscendingOrderByColumn(MarcaPeer.ID);
  MarcaGroupBean trgb = MarcaManager.getMarcas(c);
  
  if (trgb.getTotalSize()!=0)
  {
	  cadena = "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" ?>";
  	  cadena = cadena + "<result><Modelos.MARCA_ID>" + trgb.getMarca(0).getId() + "-" + trgb.getMarca(0).getNombreMarcaParsed() + "</Modelos.MARCA_ID></result>";
  }
  
  xmlResponseService(response, new StringBuffer(cadena));
 }
 
 public void serviceGetModeloDetalleXml (HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
	 utf8RequestService(request);
	 String[] getMethodos= new String[] {
				ModeloHelper.ID_GET_METHOD_NAME, 
				ModeloHelper.NOMBRE_GET_METHOD_NAME + "ModeloParsed",
				ModeloHelper.MARCA_ID_GET_METHOD_NAME + "ModeloParsed"
			 };
	  
	 
	 ModeloGroupBean tgb = new ModeloGroupBean();
	 try
	{
		tgb.setElemento(ModeloHelper.getModelo(request));
	} catch (TorqueException e)
	{
		logger.severe(e.getMessage());
	}
	 xmlResponseService(response,tgb.buildXml(getMethodos, null,"ISO-8859-1"));
 }
 
 public void serviceGetModeloDetallePdf(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
	 utf8RequestService(request);
	 String[] getMethodos= new String[] {
				ModeloHelper.ID_GET_METHOD_NAME, 
				ModeloHelper.NOMBRE_GET_METHOD_NAME + "ModeloParsed",
				ModeloHelper.MARCA_ID_GET_METHOD_NAME + "ModeloParsed"
			 };
	  
	 
	 ModeloGroupBean tgb = new ModeloGroupBean();
	 try
	{
		tgb.setElemento(ModeloHelper.getModelo(request));
	} catch (TorqueException e)
	{
		logger.severe(e.getMessage());
	}
	
	 byte[] content =  PdfUtils.getBytes(replaceStringBuffer(tgb.buildXml(getMethodos, null,"ISO-8859-1"),"n/a"," "), modelo_transformer,"ISO-8859-1");
	   response.addHeader("content-disposition","attachment;filename=modeloDetalle.pdf");
	   response.setContentType("application/pdf");
	   response.setHeader("Cache-Control", "");//para que funcione en IE
	   response.setContentLength(content.length);
	   response.getOutputStream().write(content);
	   response.getOutputStream().flush();  
	   response.getOutputStream().close();
	
 }  
 
 public void serviceModeloTableContentPdf(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
	 utf8RequestService(request);
  Criteria c= new Criteria();
  String paramQuery =  WebUtils.getStringParam(request, "query");
  if ((paramQuery != null)&& (paramQuery.compareTo("")!=0) )
	  c = ModeloManager.buildSearchCriteria(paramQuery);  
  c =criteriaModeloTableContent(request,c);  
  ModeloGroupBean tgb = ModeloManager.getModelos(c);
  
  String[] methodos= new String[] {	
			ModeloHelper.NOMBRE_GET_METHOD_NAME + "ModeloParsed",
			ModeloHelper.MARCA_ID_GET_METHOD_NAME + "ModeloParsed"
			};
  
	 byte[] content =  PdfUtils.getBytes(replaceStringBuffer(tgb.buildXml(methodos, null,"ISO-8859-1"),"n/a"," "), modelos_transformer,"ISO-8859-1");
	   response.addHeader("content-disposition","attachment;filename=ListaModelo.pdf");
	   response.setContentType("application/pdf");
	   response.setHeader("Cache-Control", "");//para que funcione en IE
	   response.setContentLength(content.length);
	   response.getOutputStream().write(content);
	   response.getOutputStream().flush();  
	   response.getOutputStream().close();

 }    
 
 }


