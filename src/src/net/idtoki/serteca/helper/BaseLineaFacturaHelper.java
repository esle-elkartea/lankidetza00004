package net.idtoki.serteca.helper;

import net.zylk.web.WebUtils;
import net.zylk.web.helper.BaseHelper;
import javax.servlet.http.HttpServletRequest;
import org.apache.torque.TorqueException;
import net.zylk.tools.format.FormatUtils;


import net.idtoki.serteca.model.LineaFacturaPeer;
import net.idtoki.serteca.model.LineaFactura;
import net.idtoki.serteca.manager.LineaFacturaManager;

/**
 * This class was autogenerated by Torque on:
 *
 * [Mon Jul 03 11:03:24 CEST 2006]
 *
 */
public abstract class BaseLineaFacturaHelper extends BaseHelper
{
	public static final String COMPLEX_ID_GET_METHOD = "getComplexId";
	private LineaFactura obj;
	public static final String ID_GET_METHOD_NAME = "getId";
	public static final String OBSERVACION_GET_METHOD_NAME = "getObs";
	public static final String FACTURA_ID_GET_METHOD_NAME = "getFacturaId";
	public static final String IMPORTE_GET_METHOD_NAME = "getImporte";
	public static final String UNIDADES_GET_METHOD_NAME = "getUnidades";
	public static final String DTO_GET_METHOD_NAME = "getDto";
	public static final String DESCRIPCION_GET_METHOD_NAME = "getDescripcion";


	public BaseLineaFacturaHelper()
	{
		this.obj = new LineaFactura();
	}

	public BaseLineaFacturaHelper(LineaFactura obj)
	{
		this.obj = obj;
	}


	public String getIdHTMLAttrs()
	{
		return " name=\"" + getIdName() + "\" " +
			   "id=\"" + getIdId() + "\" " +
			   "value=\"" + getIdValue() + "\" ";
	 }

	public String getIdId()
	{
		return getIdId(obj);
	}

	private static String getIdId(LineaFactura o)
	{
		return LineaFacturaPeer.ID;
	}

	public String getIdName()
	{
		return getIdName(obj);
	}

	private static String getIdName(LineaFactura o)
	{
		return LineaFacturaPeer.ID;
	}

	public String getIdValue()
	{
		return getIdValue(obj);
	}

	private static String getIdValue(LineaFactura o)
	{
			return "" + o.getId();
		}

	public String getObsHTMLAttrs()
	{
		return " name=\"" + getObsName() + "\" " +
			   "id=\"" + getObsId() + "\" " +
			   "value=\"" + getObsValue() + "\" ";
	 }

	public String getObsId()
	{
		return getObsId(obj);
	}

	private static String getObsId(LineaFactura o)
	{
		return LineaFacturaPeer.OBSERVACION;
	}

	public String getObsName()
	{
		return getObsName(obj);
	}

	private static String getObsName(LineaFactura o)
	{
		return LineaFacturaPeer.OBSERVACION;
	}

	public String getObsValue()
	{
		return getObsValue(obj);
	}

	private static String getObsValue(LineaFactura o)
	{
			if(o.getObs() != null)
			return "" + o.getObs();
		else
			return "";
		}

	public String getFacturaIdHTMLAttrs()
	{
		return " name=\"" + getFacturaIdName() + "\" " +
			   "id=\"" + getFacturaIdId() + "\" " +
			   "value=\"" + getFacturaIdValue() + "\" ";
	 }

	public String getFacturaIdId()
	{
		return getFacturaIdId(obj);
	}

	private static String getFacturaIdId(LineaFactura o)
	{
		return LineaFacturaPeer.FACTURA_ID;
	}

	public String getFacturaIdName()
	{
		return getFacturaIdName(obj);
	}

	private static String getFacturaIdName(LineaFactura o)
	{
		return LineaFacturaPeer.FACTURA_ID;
	}

	public String getFacturaIdValue()
	{
		return getFacturaIdValue(obj);
	}

	private static String getFacturaIdValue(LineaFactura o)
	{
			return "" + o.getFacturaId();
		}

	public String getImporteHTMLAttrs()
	{
		return " name=\"" + getImporteName() + "\" " +
			   "id=\"" + getImporteId() + "\" " +
			   "value=\"" + getImporteValue() + "\" ";
	 }

	public String getImporteId()
	{
		return getImporteId(obj);
	}

	private static String getImporteId(LineaFactura o)
	{
		return LineaFacturaPeer.IMPORTE;
	}

	public String getImporteName()
	{
		return getImporteName(obj);
	}

	private static String getImporteName(LineaFactura o)
	{
		return LineaFacturaPeer.IMPORTE;
	}

	public String getImporteValue()
	{
		return getImporteValue(obj);
	}

	private static String getImporteValue(LineaFactura o)
	{
			return "" + o.getImporte();
		}

	public String getUnidadesHTMLAttrs()
	{
		return " name=\"" + getUnidadesName() + "\" " +
			   "id=\"" + getUnidadesId() + "\" " +
			   "value=\"" + getUnidadesValue() + "\" ";
	 }

	public String getUnidadesId()
	{
		return getUnidadesId(obj);
	}

	private static String getUnidadesId(LineaFactura o)
	{
		return LineaFacturaPeer.UNIDADES;
	}

	public String getUnidadesName()
	{
		return getUnidadesName(obj);
	}

	private static String getUnidadesName(LineaFactura o)
	{
		return LineaFacturaPeer.UNIDADES;
	}

	public String getUnidadesValue()
	{
		return getUnidadesValue(obj);
	}

	private static String getUnidadesValue(LineaFactura o)
	{
			return "" + o.getUnidades();
		}

	public String getDtoHTMLAttrs()
	{
		return " name=\"" + getDtoName() + "\" " +
			   "id=\"" + getDtoId() + "\" " +
			   "value=\"" + getDtoValue() + "\" ";
	 }

	public String getDtoId()
	{
		return getDtoId(obj);
	}

	private static String getDtoId(LineaFactura o)
	{
		return LineaFacturaPeer.DTO;
	}

	public String getDtoName()
	{
		return getDtoName(obj);
	}

	private static String getDtoName(LineaFactura o)
	{
		return LineaFacturaPeer.DTO;
	}

	public String getDtoValue()
	{
		return getDtoValue(obj);
	}

	private static String getDtoValue(LineaFactura o)
	{
			return "" + o.getDto();
		}

	public String getDescripcionHTMLAttrs()
	{
		return " name=\"" + getDescripcionName() + "\" " +
			   "id=\"" + getDescripcionId() + "\" " +
			   "value=\"" + getDescripcionValue() + "\" ";
	 }

	public String getDescripcionId()
	{
		return getDescripcionId(obj);
	}

	private static String getDescripcionId(LineaFactura o)
	{
		return LineaFacturaPeer.DESCRIPCION;
	}

	public String getDescripcionName()
	{
		return getDescripcionName(obj);
	}

	private static String getDescripcionName(LineaFactura o)
	{
		return LineaFacturaPeer.DESCRIPCION;
	}

	public String getDescripcionValue()
	{
		return getDescripcionValue(obj);
	}

	private static String getDescripcionValue(LineaFactura o)
	{
			if(o.getDescripcion() != null)
			return "" + o.getDescripcion();
		else
			return "";
		}

	public static LineaFactura getLineaFactura(HttpServletRequest req) throws TorqueException
	{
										
		int id_Id = WebUtils.getintParam(req, getIdName(new LineaFactura()));

	
		LineaFactura o = new LineaFactura();
		if((id_Id >= 0)) // no es nuevo y lo fijamos en el objeto
		{
			o = LineaFacturaManager.getLineaFactura(id_Id);
		}
		return o;
	}

	public static LineaFactura createObj(HttpServletRequest req) throws TorqueException
	{
		LineaFactura o =  BaseLineaFacturaHelper.getLineaFactura(req);
			 o.setId(WebUtils.getintParam(req, getIdName(o)));
		
			 o.setObs(WebUtils.getStringParam(req, getObsName(o)));
		
			 		o.setFacturaId(Integer.parseInt(FormatUtils.getFkIdFromString(WebUtils.getStringParam(req, getFacturaIdName(o)))));
		
			 o.setImporte(WebUtils.getdoubleParam(req, getImporteName(o)));
		
			 o.setUnidades(WebUtils.getdoubleParam(req, getUnidadesName(o)));
		
			 o.setDto(WebUtils.getdoubleParam(req, getDtoName(o)));
		
			 o.setDescripcion(WebUtils.getStringParam(req, getDescripcionName(o)));
		
			return o;
	}
}
