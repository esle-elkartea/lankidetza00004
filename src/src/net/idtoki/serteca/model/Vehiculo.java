
package net.idtoki.serteca.model;


import java.util.ArrayList;
import java.util.logging.Logger;

import net.idtoki.serteca.manager.VehiculoManager;
import net.zylk.tools.ajax.AjaxUtils;
import net.zylk.tools.format.FormatUtils;

import org.apache.torque.TorqueException;
import org.apache.torque.om.Persistent;

/**
 * The skeleton for this class was autogenerated by Torque on:
 *
 * [Wed Feb 01 12:46:43 CET 2006]
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 */
public  class Vehiculo
    extends net.idtoki.serteca.model.BaseVehiculo
    implements Persistent
{
	private static final Logger logger = Logger.getLogger("net.idtoki.serteca.controller.Vehiculo");
	
	public String getIdVehiculoParsed()
	{
		return new Integer(this.getId()).toString();
	}
	
	public String getMatriculaVehiculoParsed()
	{
		return FormatUtils.genericParsedStr(this.getMatricula());
	}
	
	public String getChasisIdVehiculoParsed()
	{
		return FormatUtils.genericParsedStr(this.getChasisId());
	}
	
	public String getMotorIdVehiculoParsed()
	{
		return FormatUtils.genericParsedStr(this.getMotorId());
	}
	
	public String getColorVehiculoParsed()
	{
		return FormatUtils.genericParsedStr(this.getColor());
	}
	
	public String getVersionVehiculoParsed()
	{
		return FormatUtils.genericParsedStr(this.getVersion());
	}
	public String getFechaRevisionVehiculoParsed()
	{
		return FormatUtils.genericParsedStr(FormatUtils.aaaammdd2ddmmaaaa(this.getFechaRevision(),"-"));
	}
	
	public String getObsVehiculoParsed()
	{
		return FormatUtils.genericParsedStr(this.getObs());
	}

	public String getFechaMatriculacionVehiculoParsed()
	{
		return FormatUtils.genericParsedStr(FormatUtils.aaaammdd2ddmmaaaa(this.getFechaMatriculacion(),"-"));
	}
	 
	public String getClienteIdVehiculoParsed()
	{
		String cliente=null;
		try
		{
			cliente= this.getCliente().getId() + "-" + this.getCliente().getNombreClienteParsed();	
		}
		catch(TorqueException te)
		{
			logger.severe("No se ha podido localizar el cliente. public String getClienteIdVehiculoParsed()" );
			te.printStackTrace();
		}
		return FormatUtils.genericParsedStr(cliente);
	}
	public String getModeloIdVehiculoParsed()
	{
		String modelo=null;
		try
		{
			modelo=this.getModelo().getId() + "-" + this.getModelo().getNombreModeloParsed();
		}
		catch (TorqueException te) {
			logger.severe("No se ha podido localizar el modelo. public String getModeloIdVehiculoParsed()" );
			te.printStackTrace();
		}
		return FormatUtils.genericParsedStr(modelo);
	}
	public String getDeleteVehiculo()
	{
		return "<a href='#' class='eliminar' id='getDeleteVehiculo" + this.getId() + "'>&#160;&#160;&#160;&#160;</a>";
	}	
	public String getEditVehiculo()
	{
		return "<a href='#' class='edicion' id='getEditVehiculo" + this.getId() + "'>&#160;&#160;&#160;&#160;</a>";
	}		
}
