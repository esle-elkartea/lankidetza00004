package net.idtoki.serteca.model;


import java.math.BigDecimal;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;

import net.zylk.tools.ajax.AjaxUtils;

import org.apache.commons.lang.ObjectUtils;
import org.apache.torque.TorqueException;
import org.apache.torque.om.BaseObject;
import org.apache.torque.om.ComboKey;
import org.apache.torque.om.DateKey;
import org.apache.torque.om.NumberKey;
import org.apache.torque.om.ObjectKey;
import org.apache.torque.om.SimpleKey;
import org.apache.torque.om.StringKey;
import org.apache.torque.om.Persistent;
import org.apache.torque.util.Criteria;
import org.apache.torque.util.Transaction;

  
  
/**
 * This class was autogenerated by Torque on:
 *
 * [Mon Jul 03 11:03:24 CEST 2006]
 *
 * You should not use this class directly.  It should not even be
 * extended all references should be to LineaFactura
 */
public abstract class BaseLineaFactura extends BaseObject
{
    /** The Peer class */
    private static final LineaFacturaPeer peer =
        new LineaFacturaPeer();

                                            
    /** The value for the id field */
    private int id = -1;
      
    /** The value for the obs field */
    private String obs;
      
    /** The value for the facturaId field */
    private int facturaId;
                                          
    /** The value for the importe field */
    private double importe = 0;
                                          
    /** The value for the unidades field */
    private double unidades = 0;
                                          
    /** The value for the dto field */
    private double dto = 0;
      
    /** The value for the descripcion field */
    private String descripcion;
  
    
    /**
     * Get the Id
     *
     * @return int
     */
    public int getId()
    {
        return id;
    }

                        
    /**
     * Set the value of Id
     *
     * @param v new value
     */
    public void setId(int v) 
    {
    
                  if (this.id != v)
              {
            this.id = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Obs
     *
     * @return String
     */
    public String getObs()
    {
        return obs;
    }

                        
    /**
     * Set the value of Obs
     *
     * @param v new value
     */
    public void setObs(String v) 
    {
    
                  if (!ObjectUtils.equals(this.obs, v))
              {
            this.obs = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the FacturaId
     *
     * @return int
     */
    public int getFacturaId()
    {
        return facturaId;
    }

                              
    /**
     * Set the value of FacturaId
     *
     * @param v new value
     */
    public void setFacturaId(int v) throws TorqueException
    {
    
                  if (this.facturaId != v)
              {
            this.facturaId = v;
            setModified(true);
        }
    
                          
                if (aFacturas != null && !(aFacturas.getId() == v))
                {
            aFacturas = null;
        }
      
              }
  
    /**
     * Get the Importe
     *
     * @return double
     */
    public double getImporte()
    {
        return importe;
    }

                        
    /**
     * Set the value of Importe
     *
     * @param v new value
     */
    public void setImporte(double v) 
    {
    
                  if (this.importe != v)
              {
            this.importe = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Unidades
     *
     * @return double
     */
    public double getUnidades()
    {
        return unidades;
    }

                        
    /**
     * Set the value of Unidades
     *
     * @param v new value
     */
    public void setUnidades(double v) 
    {
    
                  if (this.unidades != v)
              {
            this.unidades = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Dto
     *
     * @return double
     */
    public double getDto()
    {
        return dto;
    }

                        
    /**
     * Set the value of Dto
     *
     * @param v new value
     */
    public void setDto(double v) 
    {
    
                  if (this.dto != v)
              {
            this.dto = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Descripcion
     *
     * @return String
     */
    public String getDescripcion()
    {
        return descripcion;
    }

                        
    /**
     * Set the value of Descripcion
     *
     * @param v new value
     */
    public void setDescripcion(String v) 
    {
    
                  if (!ObjectUtils.equals(this.descripcion, v))
              {
            this.descripcion = v;
            setModified(true);
        }
    
          
              }
  
      
    
                  
    
        private Facturas aFacturas;

    /**
     * Declares an association between this object and a Facturas object
     *
     * @param v Facturas
     * @throws TorqueException
     */
    public void setFacturas(Facturas v) throws TorqueException
    {
            if (v == null)
        {
                          setFacturaId( 0);
              }
        else
        {
            setFacturaId(v.getId());
        }
            aFacturas = v;
    }

                                            
    /**
     * Get the associated Facturas object
     *
     * @return the associated Facturas object
     * @throws TorqueException
     */
    public Facturas getFacturas() throws TorqueException
    {
        if (aFacturas == null && (this.facturaId != 0))
        {
                          aFacturas = FacturasPeer.retrieveByPK(SimpleKey.keyFor(this.facturaId));
              
            /* The following can be used instead of the line above to
               guarantee the related object contains a reference
               to this object, but this level of coupling
               may be undesirable in many circumstances.
               As it can lead to a db query with many results that may
               never be used.
               Facturas obj = FacturasPeer.retrieveByPK(this.facturaId);
               obj.addLineaFacturas(this);
            */
        }
        return aFacturas;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey, for example
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
         */
    public void setFacturasKey(ObjectKey key) throws TorqueException
    {
      
                        setFacturaId(((NumberKey) key).intValue());
                  }
       
                
    private static List fieldNames = null;

    /**
     * Generate a list of field names.
     *
     * @return a list of field names
     */
    public static synchronized List getFieldNames()
    {
        if (fieldNames == null)
        {
            fieldNames = new ArrayList();
              fieldNames.add("Id");
              fieldNames.add("Obs");
              fieldNames.add("FacturaId");
              fieldNames.add("Importe");
              fieldNames.add("Unidades");
              fieldNames.add("Dto");
              fieldNames.add("Descripcion");
              fieldNames = Collections.unmodifiableList(fieldNames);
        }
        return fieldNames;
    }

    /**
     * Retrieves a field from the object by name passed in as a String.
     *
     * @param name field name
     * @return value
     */
    public Object getByName(String name)
    {
          if (name.equals("Id"))
        {
                return new Integer(getId());
            }
          if (name.equals("Obs"))
        {
                return getObs();
            }
          if (name.equals("FacturaId"))
        {
                return new Integer(getFacturaId());
            }
          if (name.equals("Importe"))
        {
                return new Double(getImporte());
            }
          if (name.equals("Unidades"))
        {
                return new Double(getUnidades());
            }
          if (name.equals("Dto"))
        {
                return new Double(getDto());
            }
          if (name.equals("Descripcion"))
        {
                return getDescripcion();
            }
          return null;
    }

    /**
     * Retrieves a field from the object by name passed in
     * as a String.  The String must be one of the static
     * Strings defined in this Class' Peer.
     *
     * @param name peer name
     * @return value
     */
    public Object getByPeerName(String name)
    {
          if (name.equals(LineaFacturaPeer.ID))
        {
                return new Integer(getId());
            }
          if (name.equals(LineaFacturaPeer.OBSERVACION))
        {
                return getObs();
            }
          if (name.equals(LineaFacturaPeer.FACTURA_ID))
        {
                return new Integer(getFacturaId());
            }
          if (name.equals(LineaFacturaPeer.IMPORTE))
        {
                return new Double(getImporte());
            }
          if (name.equals(LineaFacturaPeer.UNIDADES))
        {
                return new Double(getUnidades());
            }
          if (name.equals(LineaFacturaPeer.DTO))
        {
                return new Double(getDto());
            }
          if (name.equals(LineaFacturaPeer.DESCRIPCION))
        {
                return getDescripcion();
            }
          return null;
    }

    /**
     * Retrieves a field from the object by Position as specified
     * in the xml schema.  Zero-based.
     *
     * @param pos position in xml schema
     * @return value
     */
    public Object getByPosition(int pos)
    {
            if (pos == 0)
        {
                return new Integer(getId());
            }
              if (pos == 1)
        {
                return getObs();
            }
              if (pos == 2)
        {
                return new Integer(getFacturaId());
            }
              if (pos == 3)
        {
                return new Double(getImporte());
            }
              if (pos == 4)
        {
                return new Double(getUnidades());
            }
              if (pos == 5)
        {
                return new Double(getDto());
            }
              if (pos == 6)
        {
                return getDescripcion();
            }
              return null;
    }
     
    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     *
     * @throws Exception
     */
    public void save() throws Exception
    {
          save(LineaFacturaPeer.getMapBuilder()
                .getDatabaseMap().getName());
      }

    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
       * Note: this code is here because the method body is
     * auto-generated conditionally and therefore needs to be
     * in this file instead of in the super class, BaseObject.
       *
     * @param dbName
     * @throws TorqueException
     */
    public void save(String dbName) throws TorqueException
    {
        Connection con = null;
          try
        {
            con = Transaction.begin(dbName);
            save(con);
            Transaction.commit(con);
        }
        catch(TorqueException e)
        {
            Transaction.safeRollback(con);
            throw e;
        }
      }

      /** flag to prevent endless save loop, if this object is referenced
        by another object which falls in this transaction. */
    private boolean alreadyInSave = false;
      /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.  This method
     * is meant to be used as part of a transaction, otherwise use
     * the save() method and the connection details will be handled
     * internally
     *
     * @param con
     * @throws TorqueException
     */
    public void save(Connection con) throws TorqueException
    {
          if (!alreadyInSave)
        {
            alreadyInSave = true;


  
            // If this object has been modified, then save it to the database.
            if (isModified())
            {
                if (isNew())
                {
                    LineaFacturaPeer.doInsert((LineaFactura) this, con);
                    setNew(false);
                }
                else
                {
                    LineaFacturaPeer.doUpdate((LineaFactura) this, con);
                }
            }

                      alreadyInSave = false;
        }
      }

                  
      /**
     * Set the PrimaryKey using ObjectKey.
     *
     * @param key id ObjectKey
     */
    public void setPrimaryKey(ObjectKey key)
        
    {
            setId(((NumberKey) key).intValue());
        }

    /**
     * Set the PrimaryKey using a String.
     *
     * @param key
     */
    public void setPrimaryKey(String key) 
    {
            setId(Integer.parseInt(key));
        }

  
    /**
     * returns an id that differentiates this object from others
     * of its class.
     */
    public ObjectKey getPrimaryKey()
    {
          return SimpleKey.keyFor(getId());
      }
 

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
       * It then fills all the association collections and sets the
     * related objects to isNew=true.
       */
      public LineaFactura copy() throws TorqueException
    {
        return copyInto(new LineaFactura());
    }
  
    protected LineaFactura copyInto(LineaFactura copyObj) throws TorqueException
    {
          copyObj.setId(id);
          copyObj.setObs(obs);
          copyObj.setFacturaId(facturaId);
          copyObj.setImporte(importe);
          copyObj.setUnidades(unidades);
          copyObj.setDto(dto);
          copyObj.setDescripcion(descripcion);
  
                            copyObj.setId( -1);
                                                
                return copyObj;
    }

    /**
     * returns a peer instance associated with this om.  Since Peer classes
     * are not to have any instance attributes, this method returns the
     * same instance for all member of this class. The method could therefore
     * be static, but this would prevent one from overriding the behavior.
     */
    public LineaFacturaPeer getPeer()
    {
        return peer;
    }

    public String toString()
    {
        StringBuffer str = new StringBuffer();
        str.append("LineaFactura:\n");
        str.append("Id = ")
               .append(getId())
             .append("\n");
        str.append("Obs = ")
               .append(getObs())
             .append("\n");
        str.append("FacturaId = ")
               .append(getFacturaId())
             .append("\n");
        str.append("Importe = ")
               .append(getImporte())
             .append("\n");
        str.append("Unidades = ")
               .append(getUnidades())
             .append("\n");
        str.append("Dto = ")
               .append(getDto())
             .append("\n");
        str.append("Descripcion = ")
               .append(getDescripcion())
             .append("\n");
        return(str.toString());
    }
    public String getComplexId()
    {
    ArrayList a = new ArrayList();
      	          a.add(Integer.toString(this.getId()));
                return  AjaxUtils.concatenateIdFields(a);
    }
}
