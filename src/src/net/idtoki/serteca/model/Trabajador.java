
package net.idtoki.serteca.model;


import java.util.logging.Logger;

import net.zylk.tools.format.FormatUtils;

import org.apache.torque.TorqueException;
import org.apache.torque.om.Persistent;

/**
 * The skeleton for this class was autogenerated by Torque on:
 *
 * [Wed Feb 01 12:46:43 CET 2006]
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 */
public  class Trabajador
    extends net.idtoki.serteca.model.BaseTrabajador
    implements Persistent
{
	private static final Logger logger = Logger.getLogger("net.idtoki.serteca.model.Trabajador");
	
	public String getNombreTrabajadorParsed()
	{
		return FormatUtils.genericParsedStr(this.getNombre());
	}
	public String getApellidosTrabajadorParsed()
	{
		return FormatUtils.genericParsedStr(this.getApellidos());
	}
	public String getApellidosDosTrabajadorParsed()
	{
		return FormatUtils.genericParsedStr(this.getApellidosDos());
	}	
	public String getFechaAltaTrabajadorParsed()
	{
		return FormatUtils.genericParsedStr(FormatUtils.aaaammdd2ddmmaaaa(this.getFechaAlta(),"-"));
	}
	public String getFechaBajaTrabajadorParsed()
	{
		return FormatUtils.genericParsedStr(FormatUtils.aaaammdd2ddmmaaaa(this.getFechaBaja(),"-"));
	}
	public String getNombreApellidos()
	{
		return  this.getNombreTrabajadorParsed()+" "+ this.getApellidosTrabajadorParsed();
	}
	public String getCifTrabajadorParsed()
	{
		return FormatUtils.genericParsedStr(this.getCif());
	}
	public String getCosteHoraTrabajadorParsed()
	{
		return FormatUtils.genericParsedStr(new Double(this.getCosteHora()).toString());
	}
	public String getDireccionTrabajadorParsed()
	{
		return FormatUtils.genericParsedStr(this.getDireccion());
	}
	public String getCpTrabajadorParsed()
	{
		return FormatUtils.genericParsedStr(this.getCp());
	}	

	public String getLocalidadIdTrabajadorParsed()
	{
		String localidad=null;
		try {
			
			localidad= this.getLocalidad().getId() + "-" + this.getLocalidad().getNombreLocalidadParsed();
		} catch (TorqueException te) {
			logger.severe("No se ha podido localizar la localidad. public String getLocalidadIdClienteParsed()" );
			te.printStackTrace();
		}
		return FormatUtils.genericParsedStr(localidad);
	}	
	public String getTlfnoTrabajadorParsed()
	{
		return FormatUtils.genericParsedStr(this.getTlfno());
	}
	public String getMovilTrabajadorParsed()
	{
		return FormatUtils.genericParsedStr(this.getMovil());
	}
	public String getEmailTrabajadorParsed()
	{
		return FormatUtils.genericParsedStr(this.getEmail());
	}

	public String getNumeroTrabajadorParsed()
	{
		return FormatUtils.genericParsedStr(this.getNumero());
	}
	public String getObsTrabajadorParsed()
	{
		return FormatUtils.genericParsedStr(this.getObs());
	}
	public String getCategoriaIdTrabajadorParsed()
	{
		String cadena="";
		try {
			cadena=this.getCategoriaId() + "-" + this.getCategoria().getNombre();
		} catch (TorqueException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return cadena;
	}
	public String getDeleteTrabajador()
	{
		return "<a href='#' class='eliminar' id='getDeleteTrabajador" + this.getId() + "'>&#160;&#160;&#160;&#160;</a>";
	}	
	public String getEditTrabajador()
	{
		return "<a href='#' class='edicion' id='getEditTrabajador" + this.getId() + "'>&#160;&#160;&#160;&#160;</a>";
	}		

}
