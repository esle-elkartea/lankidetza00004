package net.idtoki.serteca.model;


import java.math.BigDecimal;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;

import net.zylk.tools.ajax.AjaxUtils;

import org.apache.commons.lang.ObjectUtils;
import org.apache.torque.TorqueException;
import org.apache.torque.om.BaseObject;
import org.apache.torque.om.ComboKey;
import org.apache.torque.om.DateKey;
import org.apache.torque.om.NumberKey;
import org.apache.torque.om.ObjectKey;
import org.apache.torque.om.SimpleKey;
import org.apache.torque.om.StringKey;
import org.apache.torque.om.Persistent;
import org.apache.torque.util.Criteria;
import org.apache.torque.util.Transaction;

  
    
  
/**
 * This class was autogenerated by Torque on:
 *
 * [Mon Jul 03 11:03:24 CEST 2006]
 *
 * You should not use this class directly.  It should not even be
 * extended all references should be to Trabajador
 */
public abstract class BaseTrabajador extends BaseObject
{
    /** The Peer class */
    private static final TrabajadorPeer peer =
        new TrabajadorPeer();

                                            
    /** The value for the id field */
    private int id = -1;
      
    /** The value for the numero field */
    private String numero;
      
    /** The value for the fechaAlta field */
    private String fechaAlta;
      
    /** The value for the fechaBaja field */
    private String fechaBaja;
      
    /** The value for the obs field */
    private String obs;
      
    /** The value for the nombre field */
    private String nombre;
      
    /** The value for the apellidos field */
    private String apellidos;
      
    /** The value for the apellidosDos field */
    private String apellidosDos;
      
    /** The value for the cif field */
    private String cif;
                                          
    /** The value for the costeHora field */
    private double costeHora = 0;
      
    /** The value for the direccion field */
    private String direccion;
                                          
    /** The value for the localidadId field */
    private int localidadId = -1;
      
    /** The value for the cp field */
    private String cp;
      
    /** The value for the tlfno field */
    private String tlfno;
      
    /** The value for the movil field */
    private String movil;
      
    /** The value for the email field */
    private String email;
      
    /** The value for the categoriaId field */
    private int categoriaId;
  
    
    /**
     * Get the Id
     *
     * @return int
     */
    public int getId()
    {
        return id;
    }

                                              
    /**
     * Set the value of Id
     *
     * @param v new value
     */
    public void setId(int v) throws TorqueException
    {
    
                  if (this.id != v)
              {
            this.id = v;
            setModified(true);
        }
    
          
                                  
                                }
  
    /**
     * Get the Numero
     *
     * @return String
     */
    public String getNumero()
    {
        return numero;
    }

                        
    /**
     * Set the value of Numero
     *
     * @param v new value
     */
    public void setNumero(String v) 
    {
    
                  if (!ObjectUtils.equals(this.numero, v))
              {
            this.numero = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the FechaAlta
     *
     * @return String
     */
    public String getFechaAlta()
    {
        return fechaAlta;
    }

                        
    /**
     * Set the value of FechaAlta
     *
     * @param v new value
     */
    public void setFechaAlta(String v) 
    {
    
                  if (!ObjectUtils.equals(this.fechaAlta, v))
              {
            this.fechaAlta = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the FechaBaja
     *
     * @return String
     */
    public String getFechaBaja()
    {
        return fechaBaja;
    }

                        
    /**
     * Set the value of FechaBaja
     *
     * @param v new value
     */
    public void setFechaBaja(String v) 
    {
    
                  if (!ObjectUtils.equals(this.fechaBaja, v))
              {
            this.fechaBaja = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Obs
     *
     * @return String
     */
    public String getObs()
    {
        return obs;
    }

                        
    /**
     * Set the value of Obs
     *
     * @param v new value
     */
    public void setObs(String v) 
    {
    
                  if (!ObjectUtils.equals(this.obs, v))
              {
            this.obs = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Nombre
     *
     * @return String
     */
    public String getNombre()
    {
        return nombre;
    }

                        
    /**
     * Set the value of Nombre
     *
     * @param v new value
     */
    public void setNombre(String v) 
    {
    
                  if (!ObjectUtils.equals(this.nombre, v))
              {
            this.nombre = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Apellidos
     *
     * @return String
     */
    public String getApellidos()
    {
        return apellidos;
    }

                        
    /**
     * Set the value of Apellidos
     *
     * @param v new value
     */
    public void setApellidos(String v) 
    {
    
                  if (!ObjectUtils.equals(this.apellidos, v))
              {
            this.apellidos = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the ApellidosDos
     *
     * @return String
     */
    public String getApellidosDos()
    {
        return apellidosDos;
    }

                        
    /**
     * Set the value of ApellidosDos
     *
     * @param v new value
     */
    public void setApellidosDos(String v) 
    {
    
                  if (!ObjectUtils.equals(this.apellidosDos, v))
              {
            this.apellidosDos = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Cif
     *
     * @return String
     */
    public String getCif()
    {
        return cif;
    }

                        
    /**
     * Set the value of Cif
     *
     * @param v new value
     */
    public void setCif(String v) 
    {
    
                  if (!ObjectUtils.equals(this.cif, v))
              {
            this.cif = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the CosteHora
     *
     * @return double
     */
    public double getCosteHora()
    {
        return costeHora;
    }

                        
    /**
     * Set the value of CosteHora
     *
     * @param v new value
     */
    public void setCosteHora(double v) 
    {
    
                  if (this.costeHora != v)
              {
            this.costeHora = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Direccion
     *
     * @return String
     */
    public String getDireccion()
    {
        return direccion;
    }

                        
    /**
     * Set the value of Direccion
     *
     * @param v new value
     */
    public void setDireccion(String v) 
    {
    
                  if (!ObjectUtils.equals(this.direccion, v))
              {
            this.direccion = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the LocalidadId
     *
     * @return int
     */
    public int getLocalidadId()
    {
        return localidadId;
    }

                              
    /**
     * Set the value of LocalidadId
     *
     * @param v new value
     */
    public void setLocalidadId(int v) throws TorqueException
    {
    
                  if (this.localidadId != v)
              {
            this.localidadId = v;
            setModified(true);
        }
    
                          
                if (aLocalidad != null && !(aLocalidad.getId() == v))
                {
            aLocalidad = null;
        }
      
              }
  
    /**
     * Get the Cp
     *
     * @return String
     */
    public String getCp()
    {
        return cp;
    }

                        
    /**
     * Set the value of Cp
     *
     * @param v new value
     */
    public void setCp(String v) 
    {
    
                  if (!ObjectUtils.equals(this.cp, v))
              {
            this.cp = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Tlfno
     *
     * @return String
     */
    public String getTlfno()
    {
        return tlfno;
    }

                        
    /**
     * Set the value of Tlfno
     *
     * @param v new value
     */
    public void setTlfno(String v) 
    {
    
                  if (!ObjectUtils.equals(this.tlfno, v))
              {
            this.tlfno = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Movil
     *
     * @return String
     */
    public String getMovil()
    {
        return movil;
    }

                        
    /**
     * Set the value of Movil
     *
     * @param v new value
     */
    public void setMovil(String v) 
    {
    
                  if (!ObjectUtils.equals(this.movil, v))
              {
            this.movil = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Email
     *
     * @return String
     */
    public String getEmail()
    {
        return email;
    }

                        
    /**
     * Set the value of Email
     *
     * @param v new value
     */
    public void setEmail(String v) 
    {
    
                  if (!ObjectUtils.equals(this.email, v))
              {
            this.email = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the CategoriaId
     *
     * @return int
     */
    public int getCategoriaId()
    {
        return categoriaId;
    }

                              
    /**
     * Set the value of CategoriaId
     *
     * @param v new value
     */
    public void setCategoriaId(int v) throws TorqueException
    {
    
                  if (this.categoriaId != v)
              {
            this.categoriaId = v;
            setModified(true);
        }
    
                          
                if (aCategoria != null && !(aCategoria.getId() == v))
                {
            aCategoria = null;
        }
      
              }
  
      
    
                  
    
        private Localidad aLocalidad;

    /**
     * Declares an association between this object and a Localidad object
     *
     * @param v Localidad
     * @throws TorqueException
     */
    public void setLocalidad(Localidad v) throws TorqueException
    {
            if (v == null)
        {
                          setLocalidadId( -1);
              }
        else
        {
            setLocalidadId(v.getId());
        }
            aLocalidad = v;
    }

                                            
    /**
     * Get the associated Localidad object
     *
     * @return the associated Localidad object
     * @throws TorqueException
     */
    public Localidad getLocalidad() throws TorqueException
    {
        if (aLocalidad == null && (this.localidadId != 0))
        {
                          aLocalidad = LocalidadPeer.retrieveByPK(SimpleKey.keyFor(this.localidadId));
              
            /* The following can be used instead of the line above to
               guarantee the related object contains a reference
               to this object, but this level of coupling
               may be undesirable in many circumstances.
               As it can lead to a db query with many results that may
               never be used.
               Localidad obj = LocalidadPeer.retrieveByPK(this.localidadId);
               obj.addTrabajadors(this);
            */
        }
        return aLocalidad;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey, for example
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
         */
    public void setLocalidadKey(ObjectKey key) throws TorqueException
    {
      
                        setLocalidadId(((NumberKey) key).intValue());
                  }
    
    
                  
    
        private Categoria aCategoria;

    /**
     * Declares an association between this object and a Categoria object
     *
     * @param v Categoria
     * @throws TorqueException
     */
    public void setCategoria(Categoria v) throws TorqueException
    {
            if (v == null)
        {
                          setCategoriaId( 0);
              }
        else
        {
            setCategoriaId(v.getId());
        }
            aCategoria = v;
    }

                                            
    /**
     * Get the associated Categoria object
     *
     * @return the associated Categoria object
     * @throws TorqueException
     */
    public Categoria getCategoria() throws TorqueException
    {
        if (aCategoria == null && (this.categoriaId != 0))
        {
                          aCategoria = CategoriaPeer.retrieveByPK(SimpleKey.keyFor(this.categoriaId));
              
            /* The following can be used instead of the line above to
               guarantee the related object contains a reference
               to this object, but this level of coupling
               may be undesirable in many circumstances.
               As it can lead to a db query with many results that may
               never be used.
               Categoria obj = CategoriaPeer.retrieveByPK(this.categoriaId);
               obj.addTrabajadors(this);
            */
        }
        return aCategoria;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey, for example
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
         */
    public void setCategoriaKey(ObjectKey key) throws TorqueException
    {
      
                        setCategoriaId(((NumberKey) key).intValue());
                  }
       
                                
            
      
    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getOrdenTrabajos(new Criteria())
     *
     * @throws TorqueException
     */
    public List getOrdenTrabajos() throws TorqueException
    {
                  return getOrdenTrabajos(new Criteria(10));
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Trabajador has previously
     * been saved, it will retrieve related OrdenTrabajos from storage.
     * If this Trabajador is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getOrdenTrabajos(Criteria criteria) throws TorqueException
    {
                            criteria.add(OrdenTrabajoPeer.RESPONSABLE_ID, getId());
                            return OrdenTrabajoPeer.doSelect(criteria);
          }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getOrdenTrabajos(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getOrdenTrabajos(Connection con) throws TorqueException
    {
                  return getOrdenTrabajos(new Criteria(10), con);
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Trabajador has previously
     * been saved, it will retrieve related OrdenTrabajos from storage.
     * If this Trabajador is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getOrdenTrabajos(Criteria criteria, Connection con)
            throws TorqueException
    {
                             criteria.add(OrdenTrabajoPeer.RESPONSABLE_ID, getId());
                             return OrdenTrabajoPeer.doSelect(criteria, con);
           }

                        
              
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Trabajador is new, it will return
     * an empty collection; or if this Trabajador has previously
     * been saved, it will retrieve related OrdenTrabajos from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Trabajador.
     */
    protected List getOrdenTrabajosJoinReparacion(Criteria criteria)
        throws TorqueException
    {
            
                        criteria.add(OrdenTrabajoPeer.RESPONSABLE_ID, getId());
                                    return OrdenTrabajoPeer.doSelectJoinReparacion(criteria);
                }
                  
                    
                              
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Trabajador is new, it will return
     * an empty collection; or if this Trabajador has previously
     * been saved, it will retrieve related OrdenTrabajos from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Trabajador.
     */
    protected List getOrdenTrabajosJoinTrabajador(Criteria criteria)
        throws TorqueException
    {
            
                        criteria.add(OrdenTrabajoPeer.RESPONSABLE_ID, getId());
                                    return OrdenTrabajoPeer.doSelectJoinTrabajador(criteria);
                }
                            


          
    private static List fieldNames = null;

    /**
     * Generate a list of field names.
     *
     * @return a list of field names
     */
    public static synchronized List getFieldNames()
    {
        if (fieldNames == null)
        {
            fieldNames = new ArrayList();
              fieldNames.add("Id");
              fieldNames.add("Numero");
              fieldNames.add("FechaAlta");
              fieldNames.add("FechaBaja");
              fieldNames.add("Obs");
              fieldNames.add("Nombre");
              fieldNames.add("Apellidos");
              fieldNames.add("ApellidosDos");
              fieldNames.add("Cif");
              fieldNames.add("CosteHora");
              fieldNames.add("Direccion");
              fieldNames.add("LocalidadId");
              fieldNames.add("Cp");
              fieldNames.add("Tlfno");
              fieldNames.add("Movil");
              fieldNames.add("Email");
              fieldNames.add("CategoriaId");
              fieldNames = Collections.unmodifiableList(fieldNames);
        }
        return fieldNames;
    }

    /**
     * Retrieves a field from the object by name passed in as a String.
     *
     * @param name field name
     * @return value
     */
    public Object getByName(String name)
    {
          if (name.equals("Id"))
        {
                return new Integer(getId());
            }
          if (name.equals("Numero"))
        {
                return getNumero();
            }
          if (name.equals("FechaAlta"))
        {
                return getFechaAlta();
            }
          if (name.equals("FechaBaja"))
        {
                return getFechaBaja();
            }
          if (name.equals("Obs"))
        {
                return getObs();
            }
          if (name.equals("Nombre"))
        {
                return getNombre();
            }
          if (name.equals("Apellidos"))
        {
                return getApellidos();
            }
          if (name.equals("ApellidosDos"))
        {
                return getApellidosDos();
            }
          if (name.equals("Cif"))
        {
                return getCif();
            }
          if (name.equals("CosteHora"))
        {
                return new Double(getCosteHora());
            }
          if (name.equals("Direccion"))
        {
                return getDireccion();
            }
          if (name.equals("LocalidadId"))
        {
                return new Integer(getLocalidadId());
            }
          if (name.equals("Cp"))
        {
                return getCp();
            }
          if (name.equals("Tlfno"))
        {
                return getTlfno();
            }
          if (name.equals("Movil"))
        {
                return getMovil();
            }
          if (name.equals("Email"))
        {
                return getEmail();
            }
          if (name.equals("CategoriaId"))
        {
                return new Integer(getCategoriaId());
            }
          return null;
    }

    /**
     * Retrieves a field from the object by name passed in
     * as a String.  The String must be one of the static
     * Strings defined in this Class' Peer.
     *
     * @param name peer name
     * @return value
     */
    public Object getByPeerName(String name)
    {
          if (name.equals(TrabajadorPeer.ID))
        {
                return new Integer(getId());
            }
          if (name.equals(TrabajadorPeer.NUMERO))
        {
                return getNumero();
            }
          if (name.equals(TrabajadorPeer.FECHA_ALTA))
        {
                return getFechaAlta();
            }
          if (name.equals(TrabajadorPeer.FECHA_BAJA))
        {
                return getFechaBaja();
            }
          if (name.equals(TrabajadorPeer.OBSERVACION))
        {
                return getObs();
            }
          if (name.equals(TrabajadorPeer.NOMBRE))
        {
                return getNombre();
            }
          if (name.equals(TrabajadorPeer.APELLIDOS))
        {
                return getApellidos();
            }
          if (name.equals(TrabajadorPeer.APELLIDOSDOS))
        {
                return getApellidosDos();
            }
          if (name.equals(TrabajadorPeer.CIF))
        {
                return getCif();
            }
          if (name.equals(TrabajadorPeer.COSTEHORA))
        {
                return new Double(getCosteHora());
            }
          if (name.equals(TrabajadorPeer.DIRECCION))
        {
                return getDireccion();
            }
          if (name.equals(TrabajadorPeer.LOCALIDAD_ID))
        {
                return new Integer(getLocalidadId());
            }
          if (name.equals(TrabajadorPeer.CP))
        {
                return getCp();
            }
          if (name.equals(TrabajadorPeer.TELEFONO))
        {
                return getTlfno();
            }
          if (name.equals(TrabajadorPeer.MOVIL))
        {
                return getMovil();
            }
          if (name.equals(TrabajadorPeer.EMAIL))
        {
                return getEmail();
            }
          if (name.equals(TrabajadorPeer.CATEGORIA_ID))
        {
                return new Integer(getCategoriaId());
            }
          return null;
    }

    /**
     * Retrieves a field from the object by Position as specified
     * in the xml schema.  Zero-based.
     *
     * @param pos position in xml schema
     * @return value
     */
    public Object getByPosition(int pos)
    {
            if (pos == 0)
        {
                return new Integer(getId());
            }
              if (pos == 1)
        {
                return getNumero();
            }
              if (pos == 2)
        {
                return getFechaAlta();
            }
              if (pos == 3)
        {
                return getFechaBaja();
            }
              if (pos == 4)
        {
                return getObs();
            }
              if (pos == 5)
        {
                return getNombre();
            }
              if (pos == 6)
        {
                return getApellidos();
            }
              if (pos == 7)
        {
                return getApellidosDos();
            }
              if (pos == 8)
        {
                return getCif();
            }
              if (pos == 9)
        {
                return new Double(getCosteHora());
            }
              if (pos == 10)
        {
                return getDireccion();
            }
              if (pos == 11)
        {
                return new Integer(getLocalidadId());
            }
              if (pos == 12)
        {
                return getCp();
            }
              if (pos == 13)
        {
                return getTlfno();
            }
              if (pos == 14)
        {
                return getMovil();
            }
              if (pos == 15)
        {
                return getEmail();
            }
              if (pos == 16)
        {
                return new Integer(getCategoriaId());
            }
              return null;
    }
     
    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     *
     * @throws Exception
     */
    public void save() throws Exception
    {
          save(TrabajadorPeer.getMapBuilder()
                .getDatabaseMap().getName());
      }

    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
       * Note: this code is here because the method body is
     * auto-generated conditionally and therefore needs to be
     * in this file instead of in the super class, BaseObject.
       *
     * @param dbName
     * @throws TorqueException
     */
    public void save(String dbName) throws TorqueException
    {
        Connection con = null;
          try
        {
            con = Transaction.begin(dbName);
            save(con);
            Transaction.commit(con);
        }
        catch(TorqueException e)
        {
            Transaction.safeRollback(con);
            throw e;
        }
      }

      /** flag to prevent endless save loop, if this object is referenced
        by another object which falls in this transaction. */
    private boolean alreadyInSave = false;
      /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.  This method
     * is meant to be used as part of a transaction, otherwise use
     * the save() method and the connection details will be handled
     * internally
     *
     * @param con
     * @throws TorqueException
     */
    public void save(Connection con) throws TorqueException
    {
          if (!alreadyInSave)
        {
            alreadyInSave = true;


  
            // If this object has been modified, then save it to the database.
            if (isModified())
            {
                if (isNew())
                {
                    TrabajadorPeer.doInsert((Trabajador) this, con);
                    setNew(false);
                }
                else
                {
                    TrabajadorPeer.doUpdate((Trabajador) this, con);
                }
            }

                                      
                
                                  alreadyInSave = false;
        }
      }

                        
      /**
     * Set the PrimaryKey using ObjectKey.
     *
     * @param key id ObjectKey
     */
    public void setPrimaryKey(ObjectKey key)
        throws TorqueException
    {
            setId(((NumberKey) key).intValue());
        }

    /**
     * Set the PrimaryKey using a String.
     *
     * @param key
     */
    public void setPrimaryKey(String key) throws TorqueException
    {
            setId(Integer.parseInt(key));
        }

  
    /**
     * returns an id that differentiates this object from others
     * of its class.
     */
    public ObjectKey getPrimaryKey()
    {
          return SimpleKey.keyFor(getId());
      }
 

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
       * It then fills all the association collections and sets the
     * related objects to isNew=true.
       */
      public Trabajador copy() throws TorqueException
    {
        return copyInto(new Trabajador());
    }
  
    protected Trabajador copyInto(Trabajador copyObj) throws TorqueException
    {
          copyObj.setId(id);
          copyObj.setNumero(numero);
          copyObj.setFechaAlta(fechaAlta);
          copyObj.setFechaBaja(fechaBaja);
          copyObj.setObs(obs);
          copyObj.setNombre(nombre);
          copyObj.setApellidos(apellidos);
          copyObj.setApellidosDos(apellidosDos);
          copyObj.setCif(cif);
          copyObj.setCosteHora(costeHora);
          copyObj.setDireccion(direccion);
          copyObj.setLocalidadId(localidadId);
          copyObj.setCp(cp);
          copyObj.setTlfno(tlfno);
          copyObj.setMovil(movil);
          copyObj.setEmail(email);
          copyObj.setCategoriaId(categoriaId);
  
                            copyObj.setId( -1);
                                                                                                            
                                      
                            return copyObj;
    }

    /**
     * returns a peer instance associated with this om.  Since Peer classes
     * are not to have any instance attributes, this method returns the
     * same instance for all member of this class. The method could therefore
     * be static, but this would prevent one from overriding the behavior.
     */
    public TrabajadorPeer getPeer()
    {
        return peer;
    }

    public String toString()
    {
        StringBuffer str = new StringBuffer();
        str.append("Trabajador:\n");
        str.append("Id = ")
               .append(getId())
             .append("\n");
        str.append("Numero = ")
               .append(getNumero())
             .append("\n");
        str.append("FechaAlta = ")
               .append(getFechaAlta())
             .append("\n");
        str.append("FechaBaja = ")
               .append(getFechaBaja())
             .append("\n");
        str.append("Obs = ")
               .append(getObs())
             .append("\n");
        str.append("Nombre = ")
               .append(getNombre())
             .append("\n");
        str.append("Apellidos = ")
               .append(getApellidos())
             .append("\n");
        str.append("ApellidosDos = ")
               .append(getApellidosDos())
             .append("\n");
        str.append("Cif = ")
               .append(getCif())
             .append("\n");
        str.append("CosteHora = ")
               .append(getCosteHora())
             .append("\n");
        str.append("Direccion = ")
               .append(getDireccion())
             .append("\n");
        str.append("LocalidadId = ")
               .append(getLocalidadId())
             .append("\n");
        str.append("Cp = ")
               .append(getCp())
             .append("\n");
        str.append("Tlfno = ")
               .append(getTlfno())
             .append("\n");
        str.append("Movil = ")
               .append(getMovil())
             .append("\n");
        str.append("Email = ")
               .append(getEmail())
             .append("\n");
        str.append("CategoriaId = ")
               .append(getCategoriaId())
             .append("\n");
        return(str.toString());
    }
    public String getComplexId()
    {
    ArrayList a = new ArrayList();
      	          a.add(Integer.toString(this.getId()));
                return  AjaxUtils.concatenateIdFields(a);
    }
}
