package net.idtoki.serteca.model;


import java.math.BigDecimal;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;

import net.zylk.tools.ajax.AjaxUtils;

import org.apache.commons.lang.ObjectUtils;
import org.apache.torque.TorqueException;
import org.apache.torque.om.BaseObject;
import org.apache.torque.om.ComboKey;
import org.apache.torque.om.DateKey;
import org.apache.torque.om.NumberKey;
import org.apache.torque.om.ObjectKey;
import org.apache.torque.om.SimpleKey;
import org.apache.torque.om.StringKey;
import org.apache.torque.om.Persistent;
import org.apache.torque.util.Criteria;
import org.apache.torque.util.Transaction;

  
    
  
/**
 * This class was autogenerated by Torque on:
 *
 * [Mon Jul 03 11:03:24 CEST 2006]
 *
 * You should not use this class directly.  It should not even be
 * extended all references should be to Facturas
 */
public abstract class BaseFacturas extends BaseObject
{
    /** The Peer class */
    private static final FacturasPeer peer =
        new FacturasPeer();

                                            
    /** The value for the id field */
    private int id = -1;
      
    /** The value for the fechaIni field */
    private String fechaIni;
                                          
    /** The value for the importe field */
    private double importe = 0;
                                          
    /** The value for the estado field */
    private int estado = 0;
      
    /** The value for the descripcion field */
    private String descripcion;
      
    /** The value for the obs field */
    private String obs;
      
    /** The value for the clienteId field */
    private int clienteId;
      
    /** The value for the reparacionId field */
    private int reparacionId;
  
    
    /**
     * Get the Id
     *
     * @return int
     */
    public int getId()
    {
        return id;
    }

                                              
    /**
     * Set the value of Id
     *
     * @param v new value
     */
    public void setId(int v) throws TorqueException
    {
    
                  if (this.id != v)
              {
            this.id = v;
            setModified(true);
        }
    
          
                                  
                                }
  
    /**
     * Get the FechaIni
     *
     * @return String
     */
    public String getFechaIni()
    {
        return fechaIni;
    }

                        
    /**
     * Set the value of FechaIni
     *
     * @param v new value
     */
    public void setFechaIni(String v) 
    {
    
                  if (!ObjectUtils.equals(this.fechaIni, v))
              {
            this.fechaIni = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Importe
     *
     * @return double
     */
    public double getImporte()
    {
        return importe;
    }

                        
    /**
     * Set the value of Importe
     *
     * @param v new value
     */
    public void setImporte(double v) 
    {
    
                  if (this.importe != v)
              {
            this.importe = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Estado
     *
     * @return int
     */
    public int getEstado()
    {
        return estado;
    }

                        
    /**
     * Set the value of Estado
     *
     * @param v new value
     */
    public void setEstado(int v) 
    {
    
                  if (this.estado != v)
              {
            this.estado = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Descripcion
     *
     * @return String
     */
    public String getDescripcion()
    {
        return descripcion;
    }

                        
    /**
     * Set the value of Descripcion
     *
     * @param v new value
     */
    public void setDescripcion(String v) 
    {
    
                  if (!ObjectUtils.equals(this.descripcion, v))
              {
            this.descripcion = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Obs
     *
     * @return String
     */
    public String getObs()
    {
        return obs;
    }

                        
    /**
     * Set the value of Obs
     *
     * @param v new value
     */
    public void setObs(String v) 
    {
    
                  if (!ObjectUtils.equals(this.obs, v))
              {
            this.obs = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the ClienteId
     *
     * @return int
     */
    public int getClienteId()
    {
        return clienteId;
    }

                              
    /**
     * Set the value of ClienteId
     *
     * @param v new value
     */
    public void setClienteId(int v) throws TorqueException
    {
    
                  if (this.clienteId != v)
              {
            this.clienteId = v;
            setModified(true);
        }
    
                          
                if (aCliente != null && !(aCliente.getId() == v))
                {
            aCliente = null;
        }
      
              }
  
    /**
     * Get the ReparacionId
     *
     * @return int
     */
    public int getReparacionId()
    {
        return reparacionId;
    }

                              
    /**
     * Set the value of ReparacionId
     *
     * @param v new value
     */
    public void setReparacionId(int v) throws TorqueException
    {
    
                  if (this.reparacionId != v)
              {
            this.reparacionId = v;
            setModified(true);
        }
    
                          
                if (aReparacion != null && !(aReparacion.getId() == v))
                {
            aReparacion = null;
        }
      
              }
  
      
    
                  
    
        private Cliente aCliente;

    /**
     * Declares an association between this object and a Cliente object
     *
     * @param v Cliente
     * @throws TorqueException
     */
    public void setCliente(Cliente v) throws TorqueException
    {
            if (v == null)
        {
                          setClienteId( 0);
              }
        else
        {
            setClienteId(v.getId());
        }
            aCliente = v;
    }

                                            
    /**
     * Get the associated Cliente object
     *
     * @return the associated Cliente object
     * @throws TorqueException
     */
    public Cliente getCliente() throws TorqueException
    {
        if (aCliente == null && (this.clienteId != 0))
        {
                          aCliente = ClientePeer.retrieveByPK(SimpleKey.keyFor(this.clienteId));
              
            /* The following can be used instead of the line above to
               guarantee the related object contains a reference
               to this object, but this level of coupling
               may be undesirable in many circumstances.
               As it can lead to a db query with many results that may
               never be used.
               Cliente obj = ClientePeer.retrieveByPK(this.clienteId);
               obj.addFacturass(this);
            */
        }
        return aCliente;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey, for example
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
         */
    public void setClienteKey(ObjectKey key) throws TorqueException
    {
      
                        setClienteId(((NumberKey) key).intValue());
                  }
    
    
                  
    
        private Reparacion aReparacion;

    /**
     * Declares an association between this object and a Reparacion object
     *
     * @param v Reparacion
     * @throws TorqueException
     */
    public void setReparacion(Reparacion v) throws TorqueException
    {
            if (v == null)
        {
                          setReparacionId( 0);
              }
        else
        {
            setReparacionId(v.getId());
        }
            aReparacion = v;
    }

                                            
    /**
     * Get the associated Reparacion object
     *
     * @return the associated Reparacion object
     * @throws TorqueException
     */
    public Reparacion getReparacion() throws TorqueException
    {
        if (aReparacion == null && (this.reparacionId != 0))
        {
                          aReparacion = ReparacionPeer.retrieveByPK(SimpleKey.keyFor(this.reparacionId));
              
            /* The following can be used instead of the line above to
               guarantee the related object contains a reference
               to this object, but this level of coupling
               may be undesirable in many circumstances.
               As it can lead to a db query with many results that may
               never be used.
               Reparacion obj = ReparacionPeer.retrieveByPK(this.reparacionId);
               obj.addFacturass(this);
            */
        }
        return aReparacion;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey, for example
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
         */
    public void setReparacionKey(ObjectKey key) throws TorqueException
    {
      
                        setReparacionId(((NumberKey) key).intValue());
                  }
       
                                
            
      
    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getLineaFacturas(new Criteria())
     *
     * @throws TorqueException
     */
    public List getLineaFacturas() throws TorqueException
    {
                  return getLineaFacturas(new Criteria(10));
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Facturas has previously
     * been saved, it will retrieve related LineaFacturas from storage.
     * If this Facturas is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getLineaFacturas(Criteria criteria) throws TorqueException
    {
                            criteria.add(LineaFacturaPeer.FACTURA_ID, getId());
                            return LineaFacturaPeer.doSelect(criteria);
          }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getLineaFacturas(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getLineaFacturas(Connection con) throws TorqueException
    {
                  return getLineaFacturas(new Criteria(10), con);
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Facturas has previously
     * been saved, it will retrieve related LineaFacturas from storage.
     * If this Facturas is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getLineaFacturas(Criteria criteria, Connection con)
            throws TorqueException
    {
                             criteria.add(LineaFacturaPeer.FACTURA_ID, getId());
                             return LineaFacturaPeer.doSelect(criteria, con);
           }

                  
              
                    
                              
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Facturas is new, it will return
     * an empty collection; or if this Facturas has previously
     * been saved, it will retrieve related LineaFacturas from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Facturas.
     */
    protected List getLineaFacturasJoinFacturas(Criteria criteria)
        throws TorqueException
    {
            
                        criteria.add(LineaFacturaPeer.FACTURA_ID, getId());
                                    return LineaFacturaPeer.doSelectJoinFacturas(criteria);
                }
                            


          
    private static List fieldNames = null;

    /**
     * Generate a list of field names.
     *
     * @return a list of field names
     */
    public static synchronized List getFieldNames()
    {
        if (fieldNames == null)
        {
            fieldNames = new ArrayList();
              fieldNames.add("Id");
              fieldNames.add("FechaIni");
              fieldNames.add("Importe");
              fieldNames.add("Estado");
              fieldNames.add("Descripcion");
              fieldNames.add("Obs");
              fieldNames.add("ClienteId");
              fieldNames.add("ReparacionId");
              fieldNames = Collections.unmodifiableList(fieldNames);
        }
        return fieldNames;
    }

    /**
     * Retrieves a field from the object by name passed in as a String.
     *
     * @param name field name
     * @return value
     */
    public Object getByName(String name)
    {
          if (name.equals("Id"))
        {
                return new Integer(getId());
            }
          if (name.equals("FechaIni"))
        {
                return getFechaIni();
            }
          if (name.equals("Importe"))
        {
                return new Double(getImporte());
            }
          if (name.equals("Estado"))
        {
                return new Integer(getEstado());
            }
          if (name.equals("Descripcion"))
        {
                return getDescripcion();
            }
          if (name.equals("Obs"))
        {
                return getObs();
            }
          if (name.equals("ClienteId"))
        {
                return new Integer(getClienteId());
            }
          if (name.equals("ReparacionId"))
        {
                return new Integer(getReparacionId());
            }
          return null;
    }

    /**
     * Retrieves a field from the object by name passed in
     * as a String.  The String must be one of the static
     * Strings defined in this Class' Peer.
     *
     * @param name peer name
     * @return value
     */
    public Object getByPeerName(String name)
    {
          if (name.equals(FacturasPeer.ID))
        {
                return new Integer(getId());
            }
          if (name.equals(FacturasPeer.FECHA))
        {
                return getFechaIni();
            }
          if (name.equals(FacturasPeer.IMPORTE))
        {
                return new Double(getImporte());
            }
          if (name.equals(FacturasPeer.ESTADO))
        {
                return new Integer(getEstado());
            }
          if (name.equals(FacturasPeer.DESCRIPCION))
        {
                return getDescripcion();
            }
          if (name.equals(FacturasPeer.OBSERVACION))
        {
                return getObs();
            }
          if (name.equals(FacturasPeer.CLIENTE_ID))
        {
                return new Integer(getClienteId());
            }
          if (name.equals(FacturasPeer.REPARACION_ID))
        {
                return new Integer(getReparacionId());
            }
          return null;
    }

    /**
     * Retrieves a field from the object by Position as specified
     * in the xml schema.  Zero-based.
     *
     * @param pos position in xml schema
     * @return value
     */
    public Object getByPosition(int pos)
    {
            if (pos == 0)
        {
                return new Integer(getId());
            }
              if (pos == 1)
        {
                return getFechaIni();
            }
              if (pos == 2)
        {
                return new Double(getImporte());
            }
              if (pos == 3)
        {
                return new Integer(getEstado());
            }
              if (pos == 4)
        {
                return getDescripcion();
            }
              if (pos == 5)
        {
                return getObs();
            }
              if (pos == 6)
        {
                return new Integer(getClienteId());
            }
              if (pos == 7)
        {
                return new Integer(getReparacionId());
            }
              return null;
    }
     
    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     *
     * @throws Exception
     */
    public void save() throws Exception
    {
          save(FacturasPeer.getMapBuilder()
                .getDatabaseMap().getName());
      }

    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
       * Note: this code is here because the method body is
     * auto-generated conditionally and therefore needs to be
     * in this file instead of in the super class, BaseObject.
       *
     * @param dbName
     * @throws TorqueException
     */
    public void save(String dbName) throws TorqueException
    {
        Connection con = null;
          try
        {
            con = Transaction.begin(dbName);
            save(con);
            Transaction.commit(con);
        }
        catch(TorqueException e)
        {
            Transaction.safeRollback(con);
            throw e;
        }
      }

      /** flag to prevent endless save loop, if this object is referenced
        by another object which falls in this transaction. */
    private boolean alreadyInSave = false;
      /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.  This method
     * is meant to be used as part of a transaction, otherwise use
     * the save() method and the connection details will be handled
     * internally
     *
     * @param con
     * @throws TorqueException
     */
    public void save(Connection con) throws TorqueException
    {
          if (!alreadyInSave)
        {
            alreadyInSave = true;


  
            // If this object has been modified, then save it to the database.
            if (isModified())
            {
                if (isNew())
                {
                    FacturasPeer.doInsert((Facturas) this, con);
                    setNew(false);
                }
                else
                {
                    FacturasPeer.doUpdate((Facturas) this, con);
                }
            }

                                      
                
                                  alreadyInSave = false;
        }
      }

                        
      /**
     * Set the PrimaryKey using ObjectKey.
     *
     * @param key id ObjectKey
     */
    public void setPrimaryKey(ObjectKey key)
        throws TorqueException
    {
            setId(((NumberKey) key).intValue());
        }

    /**
     * Set the PrimaryKey using a String.
     *
     * @param key
     */
    public void setPrimaryKey(String key) throws TorqueException
    {
            setId(Integer.parseInt(key));
        }

  
    /**
     * returns an id that differentiates this object from others
     * of its class.
     */
    public ObjectKey getPrimaryKey()
    {
          return SimpleKey.keyFor(getId());
      }
 

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
       * It then fills all the association collections and sets the
     * related objects to isNew=true.
       */
      public Facturas copy() throws TorqueException
    {
        return copyInto(new Facturas());
    }
  
    protected Facturas copyInto(Facturas copyObj) throws TorqueException
    {
          copyObj.setId(id);
          copyObj.setFechaIni(fechaIni);
          copyObj.setImporte(importe);
          copyObj.setEstado(estado);
          copyObj.setDescripcion(descripcion);
          copyObj.setObs(obs);
          copyObj.setClienteId(clienteId);
          copyObj.setReparacionId(reparacionId);
  
                            copyObj.setId( -1);
                                                      
                                      
                            return copyObj;
    }

    /**
     * returns a peer instance associated with this om.  Since Peer classes
     * are not to have any instance attributes, this method returns the
     * same instance for all member of this class. The method could therefore
     * be static, but this would prevent one from overriding the behavior.
     */
    public FacturasPeer getPeer()
    {
        return peer;
    }

    public String toString()
    {
        StringBuffer str = new StringBuffer();
        str.append("Facturas:\n");
        str.append("Id = ")
               .append(getId())
             .append("\n");
        str.append("FechaIni = ")
               .append(getFechaIni())
             .append("\n");
        str.append("Importe = ")
               .append(getImporte())
             .append("\n");
        str.append("Estado = ")
               .append(getEstado())
             .append("\n");
        str.append("Descripcion = ")
               .append(getDescripcion())
             .append("\n");
        str.append("Obs = ")
               .append(getObs())
             .append("\n");
        str.append("ClienteId = ")
               .append(getClienteId())
             .append("\n");
        str.append("ReparacionId = ")
               .append(getReparacionId())
             .append("\n");
        return(str.toString());
    }
    public String getComplexId()
    {
    ArrayList a = new ArrayList();
      	          a.add(Integer.toString(this.getId()));
                return  AjaxUtils.concatenateIdFields(a);
    }
}
