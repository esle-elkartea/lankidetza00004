
package net.idtoki.serteca.model;


import java.util.ArrayList;
import java.util.List;
import java.util.logging.Logger;

import net.idtoki.serteca.manager.ClienteManager;
import net.zylk.tools.format.FormatUtils;

import org.apache.torque.TorqueException;
import org.apache.torque.om.Persistent;
import org.apache.torque.util.Criteria;

/**
 * The skeleton for this class was autogenerated by Torque on:
 *
 * [Wed Feb 01 12:46:43 CET 2006]
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 */
public  class Cliente
    extends net.idtoki.serteca.model.BaseCliente
    implements Persistent
{
	private static final Logger logger = Logger.getLogger("net.idtoki.serteca.model.Cliente");
	public String getNombreClienteParsed()
	{
		return FormatUtils.genericParsedStr(this.getNombre());
	}
	public String getNifClienteParsed()
	{
		return FormatUtils.genericParsedStr(this.getNif());
	}

	public String getLocalidadIdClienteParsed()
	{
		String localidad=null;
		try {
			
			localidad= this.getLocalidad().getId() + "-" + this.getLocalidad().getNombreLocalidadParsed();
		} catch (TorqueException te) {
			logger.severe("No se ha podido localizar la localidad. public String getLocalidadIdClienteParsed()" );
			te.printStackTrace();
		}
		return FormatUtils.genericParsedStr(localidad);
	}	
	public String getDireccionClienteParsed()
	{
		return FormatUtils.genericParsedStr(this.getDireccion());
	}
	public String getNombreComercialClienteParsed()
	{
		return FormatUtils.genericParsedStr(this.getNombreComercial());
	}
	public String getRazonSocialClienteParsed()
	{
		return FormatUtils.genericParsedStr(this.getRazonSocial());
	}
	public String getCpClienteParsed()
	{
		return FormatUtils.genericParsedStr(this.getCp());
	}
	public String getTlfnoClienteParsed()
	{
		return FormatUtils.genericParsedStr(this.getTlfno());
	}
	public String getFaxClienteParsed()
	{
		return FormatUtils.genericParsedStr(this.getFax());
	}
	public String getMovilClienteParsed()
	{
		return FormatUtils.genericParsedStr(this.getMovil());
	}
	public String getEmailClienteParsed()
	{
		return FormatUtils.genericParsedStr(this.getEmail());
	}
	public String getNumeroCuentaClienteParsed()
	{
		return FormatUtils.genericParsedStr(this.getNumeroCuenta());
	}
	public String getObsClienteParsed()
	{
		return FormatUtils.genericParsedStr(this.getObs());
	}
	public String getFormaPagoIdClienteParsed()
	{
		String cadena=null;
		try {
			
			cadena= this.getFormaPago().getId() + "-" + this.getFormaPago().getNombreFormaPagoParsed();
		} catch (TorqueException te) {
			logger.severe("No se ha podido localizar la forma de pago. public String getFormaPagoIdClienteParsed()" );
			te.printStackTrace();
		}
		return FormatUtils.genericParsedStr(cadena);
	}
	public String getDiaPagoClienteParsed()
	{
		return FormatUtils.genericParsedStr(new Integer(this.getDiaPago()).toString());
	}
	public String getDtoProntoPagoClienteParsed()
	{
		return FormatUtils.genericParsedStr(new Integer(this.getDtoProntoPago()).toString());
	}
	public String getDeleteCliente()
	{
		return "<a href='#' class='eliminar' id='getDeleteCliente" + this.getId() + "'>&#160;&#160;&#160;&#160;</a>";
	}	
	public String getEditCliente()
	{
		return "<a href='#' class='edicion' id='getEditCliente" + this.getId() + "'>&#160;&#160;&#160;&#160;</a>";
	}
	public String getImporteCobradoClienteParsed()
	{
		float importe=0;
		importe=ClienteManager.getImporteCobrado(this.getId()) ;
		return new Float(importe).toString();
	}
	public String getImportePendienteClienteParsed()
	{
		float importe=0;
		importe=ClienteManager.getImportePendiente(this.getId()) ;
		return new Float(importe).toString();

	}
}
