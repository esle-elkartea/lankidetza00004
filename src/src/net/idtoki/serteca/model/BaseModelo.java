package net.idtoki.serteca.model;


import java.math.BigDecimal;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;

import net.zylk.tools.ajax.AjaxUtils;

import org.apache.commons.lang.ObjectUtils;
import org.apache.torque.TorqueException;
import org.apache.torque.om.BaseObject;
import org.apache.torque.om.ComboKey;
import org.apache.torque.om.DateKey;
import org.apache.torque.om.NumberKey;
import org.apache.torque.om.ObjectKey;
import org.apache.torque.om.SimpleKey;
import org.apache.torque.om.StringKey;
import org.apache.torque.om.Persistent;
import org.apache.torque.util.Criteria;
import org.apache.torque.util.Transaction;

  
  
/**
 * This class was autogenerated by Torque on:
 *
 * [Mon Jul 03 11:03:24 CEST 2006]
 *
 * You should not use this class directly.  It should not even be
 * extended all references should be to Modelo
 */
public abstract class BaseModelo extends BaseObject
{
    /** The Peer class */
    private static final ModeloPeer peer =
        new ModeloPeer();

                                            
    /** The value for the id field */
    private int id = -1;
                                                
    /** The value for the nombre field */
    private String nombre = "";
      
    /** The value for the marcaId field */
    private int marcaId;
  
    
    /**
     * Get the Id
     *
     * @return int
     */
    public int getId()
    {
        return id;
    }

                                              
    /**
     * Set the value of Id
     *
     * @param v new value
     */
    public void setId(int v) throws TorqueException
    {
    
                  if (this.id != v)
              {
            this.id = v;
            setModified(true);
        }
    
          
                                  
                                                    
                                }
  
    /**
     * Get the Nombre
     *
     * @return String
     */
    public String getNombre()
    {
        return nombre;
    }

                        
    /**
     * Set the value of Nombre
     *
     * @param v new value
     */
    public void setNombre(String v) 
    {
    
                  if (!ObjectUtils.equals(this.nombre, v))
              {
            this.nombre = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the MarcaId
     *
     * @return int
     */
    public int getMarcaId()
    {
        return marcaId;
    }

                              
    /**
     * Set the value of MarcaId
     *
     * @param v new value
     */
    public void setMarcaId(int v) throws TorqueException
    {
    
                  if (this.marcaId != v)
              {
            this.marcaId = v;
            setModified(true);
        }
    
                          
                if (aMarca != null && !(aMarca.getId() == v))
                {
            aMarca = null;
        }
      
              }
  
      
    
                  
    
        private Marca aMarca;

    /**
     * Declares an association between this object and a Marca object
     *
     * @param v Marca
     * @throws TorqueException
     */
    public void setMarca(Marca v) throws TorqueException
    {
            if (v == null)
        {
                          setMarcaId( 0);
              }
        else
        {
            setMarcaId(v.getId());
        }
            aMarca = v;
    }

                                            
    /**
     * Get the associated Marca object
     *
     * @return the associated Marca object
     * @throws TorqueException
     */
    public Marca getMarca() throws TorqueException
    {
        if (aMarca == null && (this.marcaId != 0))
        {
                          aMarca = MarcaPeer.retrieveByPK(SimpleKey.keyFor(this.marcaId));
              
            /* The following can be used instead of the line above to
               guarantee the related object contains a reference
               to this object, but this level of coupling
               may be undesirable in many circumstances.
               As it can lead to a db query with many results that may
               never be used.
               Marca obj = MarcaPeer.retrieveByPK(this.marcaId);
               obj.addModelos(this);
            */
        }
        return aMarca;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey, for example
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
         */
    public void setMarcaKey(ObjectKey key) throws TorqueException
    {
      
                        setMarcaId(((NumberKey) key).intValue());
                  }
       
                                
            
      
    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getVehiculos(new Criteria())
     *
     * @throws TorqueException
     */
    public List getVehiculos() throws TorqueException
    {
                  return getVehiculos(new Criteria(10));
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Modelo has previously
     * been saved, it will retrieve related Vehiculos from storage.
     * If this Modelo is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getVehiculos(Criteria criteria) throws TorqueException
    {
                            criteria.add(VehiculoPeer.MODELO_ID, getId());
                            return VehiculoPeer.doSelect(criteria);
          }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getVehiculos(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getVehiculos(Connection con) throws TorqueException
    {
                  return getVehiculos(new Criteria(10), con);
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Modelo has previously
     * been saved, it will retrieve related Vehiculos from storage.
     * If this Modelo is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getVehiculos(Criteria criteria, Connection con)
            throws TorqueException
    {
                             criteria.add(VehiculoPeer.MODELO_ID, getId());
                             return VehiculoPeer.doSelect(criteria, con);
           }

                        
              
                    
                              
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Modelo is new, it will return
     * an empty collection; or if this Modelo has previously
     * been saved, it will retrieve related Vehiculos from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Modelo.
     */
    protected List getVehiculosJoinModelo(Criteria criteria)
        throws TorqueException
    {
            
                        criteria.add(VehiculoPeer.MODELO_ID, getId());
                                    return VehiculoPeer.doSelectJoinModelo(criteria);
                }
                  
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Modelo is new, it will return
     * an empty collection; or if this Modelo has previously
     * been saved, it will retrieve related Vehiculos from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Modelo.
     */
    protected List getVehiculosJoinCliente(Criteria criteria)
        throws TorqueException
    {
            
                        criteria.add(VehiculoPeer.MODELO_ID, getId());
                                    return VehiculoPeer.doSelectJoinCliente(criteria);
                }
                            


                          
            
      
    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getVehiculoCortesias(new Criteria())
     *
     * @throws TorqueException
     */
    public List getVehiculoCortesias() throws TorqueException
    {
                  return getVehiculoCortesias(new Criteria(10));
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Modelo has previously
     * been saved, it will retrieve related VehiculoCortesias from storage.
     * If this Modelo is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getVehiculoCortesias(Criteria criteria) throws TorqueException
    {
                            criteria.add(VehiculoCortesiaPeer.MODELO_ID, getId());
                            return VehiculoCortesiaPeer.doSelect(criteria);
          }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getVehiculoCortesias(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getVehiculoCortesias(Connection con) throws TorqueException
    {
                  return getVehiculoCortesias(new Criteria(10), con);
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Modelo has previously
     * been saved, it will retrieve related VehiculoCortesias from storage.
     * If this Modelo is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getVehiculoCortesias(Criteria criteria, Connection con)
            throws TorqueException
    {
                             criteria.add(VehiculoCortesiaPeer.MODELO_ID, getId());
                             return VehiculoCortesiaPeer.doSelect(criteria, con);
           }

                  
              
                    
                              
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Modelo is new, it will return
     * an empty collection; or if this Modelo has previously
     * been saved, it will retrieve related VehiculoCortesias from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Modelo.
     */
    protected List getVehiculoCortesiasJoinModelo(Criteria criteria)
        throws TorqueException
    {
            
                        criteria.add(VehiculoCortesiaPeer.MODELO_ID, getId());
                                    return VehiculoCortesiaPeer.doSelectJoinModelo(criteria);
                }
                            


          
    private static List fieldNames = null;

    /**
     * Generate a list of field names.
     *
     * @return a list of field names
     */
    public static synchronized List getFieldNames()
    {
        if (fieldNames == null)
        {
            fieldNames = new ArrayList();
              fieldNames.add("Id");
              fieldNames.add("Nombre");
              fieldNames.add("MarcaId");
              fieldNames = Collections.unmodifiableList(fieldNames);
        }
        return fieldNames;
    }

    /**
     * Retrieves a field from the object by name passed in as a String.
     *
     * @param name field name
     * @return value
     */
    public Object getByName(String name)
    {
          if (name.equals("Id"))
        {
                return new Integer(getId());
            }
          if (name.equals("Nombre"))
        {
                return getNombre();
            }
          if (name.equals("MarcaId"))
        {
                return new Integer(getMarcaId());
            }
          return null;
    }

    /**
     * Retrieves a field from the object by name passed in
     * as a String.  The String must be one of the static
     * Strings defined in this Class' Peer.
     *
     * @param name peer name
     * @return value
     */
    public Object getByPeerName(String name)
    {
          if (name.equals(ModeloPeer.ID))
        {
                return new Integer(getId());
            }
          if (name.equals(ModeloPeer.NOMBRE))
        {
                return getNombre();
            }
          if (name.equals(ModeloPeer.MARCA_ID))
        {
                return new Integer(getMarcaId());
            }
          return null;
    }

    /**
     * Retrieves a field from the object by Position as specified
     * in the xml schema.  Zero-based.
     *
     * @param pos position in xml schema
     * @return value
     */
    public Object getByPosition(int pos)
    {
            if (pos == 0)
        {
                return new Integer(getId());
            }
              if (pos == 1)
        {
                return getNombre();
            }
              if (pos == 2)
        {
                return new Integer(getMarcaId());
            }
              return null;
    }
     
    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     *
     * @throws Exception
     */
    public void save() throws Exception
    {
          save(ModeloPeer.getMapBuilder()
                .getDatabaseMap().getName());
      }

    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
       * Note: this code is here because the method body is
     * auto-generated conditionally and therefore needs to be
     * in this file instead of in the super class, BaseObject.
       *
     * @param dbName
     * @throws TorqueException
     */
    public void save(String dbName) throws TorqueException
    {
        Connection con = null;
          try
        {
            con = Transaction.begin(dbName);
            save(con);
            Transaction.commit(con);
        }
        catch(TorqueException e)
        {
            Transaction.safeRollback(con);
            throw e;
        }
      }

      /** flag to prevent endless save loop, if this object is referenced
        by another object which falls in this transaction. */
    private boolean alreadyInSave = false;
      /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.  This method
     * is meant to be used as part of a transaction, otherwise use
     * the save() method and the connection details will be handled
     * internally
     *
     * @param con
     * @throws TorqueException
     */
    public void save(Connection con) throws TorqueException
    {
          if (!alreadyInSave)
        {
            alreadyInSave = true;


  
            // If this object has been modified, then save it to the database.
            if (isModified())
            {
                if (isNew())
                {
                    ModeloPeer.doInsert((Modelo) this, con);
                    setNew(false);
                }
                else
                {
                    ModeloPeer.doUpdate((Modelo) this, con);
                }
            }

                                      
                
                                                  
                
                                  alreadyInSave = false;
        }
      }

                        
      /**
     * Set the PrimaryKey using ObjectKey.
     *
     * @param key id ObjectKey
     */
    public void setPrimaryKey(ObjectKey key)
        throws TorqueException
    {
            setId(((NumberKey) key).intValue());
        }

    /**
     * Set the PrimaryKey using a String.
     *
     * @param key
     */
    public void setPrimaryKey(String key) throws TorqueException
    {
            setId(Integer.parseInt(key));
        }

  
    /**
     * returns an id that differentiates this object from others
     * of its class.
     */
    public ObjectKey getPrimaryKey()
    {
          return SimpleKey.keyFor(getId());
      }
 

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
       * It then fills all the association collections and sets the
     * related objects to isNew=true.
       */
      public Modelo copy() throws TorqueException
    {
        return copyInto(new Modelo());
    }
  
    protected Modelo copyInto(Modelo copyObj) throws TorqueException
    {
          copyObj.setId(id);
          copyObj.setNombre(nombre);
          copyObj.setMarcaId(marcaId);
  
                            copyObj.setId( -1);
                        
                                      
                                                  
                            return copyObj;
    }

    /**
     * returns a peer instance associated with this om.  Since Peer classes
     * are not to have any instance attributes, this method returns the
     * same instance for all member of this class. The method could therefore
     * be static, but this would prevent one from overriding the behavior.
     */
    public ModeloPeer getPeer()
    {
        return peer;
    }

    public String toString()
    {
        StringBuffer str = new StringBuffer();
        str.append("Modelo:\n");
        str.append("Id = ")
               .append(getId())
             .append("\n");
        str.append("Nombre = ")
               .append(getNombre())
             .append("\n");
        str.append("MarcaId = ")
               .append(getMarcaId())
             .append("\n");
        return(str.toString());
    }
    public String getComplexId()
    {
    ArrayList a = new ArrayList();
      	          a.add(Integer.toString(this.getId()));
                return  AjaxUtils.concatenateIdFields(a);
    }
}
