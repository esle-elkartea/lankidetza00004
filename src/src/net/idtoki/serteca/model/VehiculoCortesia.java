
package net.idtoki.serteca.model;


import java.util.logging.Logger;

import net.idtoki.serteca.manager.VehiculoCortesiaManager;
import net.zylk.tools.format.FormatUtils;

import org.apache.torque.TorqueException;
import org.apache.torque.om.Persistent;
import org.apache.torque.util.Criteria;

/**
 * The skeleton for this class was autogenerated by Torque on:
 *
 * [Wed Feb 01 12:46:43 CET 2006]
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 */
public  class VehiculoCortesia
    extends net.idtoki.serteca.model.BaseVehiculoCortesia
    implements Persistent
{
	private static final Logger logger = Logger.getLogger("net.idtoki.serteca.controller.VehiculoCortesia");
	
	public String getVersionVehiculoCortesiaParsed()
	{
		return FormatUtils.genericParsedStr(this.getVersion());
	}
	public String getMatriculaVehiculoCortesiaParsed()
	{
		return FormatUtils.genericParsedStr(this.getMatricula());
	}	
	public String getModeloIdVehiculoCortesiaParsed()
	{
		String modelo=null;
		try
		{
			modelo=this.getModelo().getId() + "-" + this.getModelo().getNombreModeloParsed();
		}
		catch (TorqueException te) {
			logger.severe("No se ha podido localizar el modelo. public String getModeloIdVehiculoParsed()" );
			te.printStackTrace();
		}
		return FormatUtils.genericParsedStr(modelo);
		//return FormatUtils.genericParsedStr(this.getModelo().getId() + "-" + this.getModelo().getNombreModeloParsed());
	}	
	public String getChasisIdVehiculoCortesiaParsed()
	{
		return FormatUtils.genericParsedStr(this.getChasisId());
	}
	public String getColorVehiculoCortesiaParsed()
	{
		return FormatUtils.genericParsedStr(this.getColor());
	}
	public String getObsVehiculoCortesiaParsed()
	{
		return FormatUtils.genericParsedStr(this.getObs());
	}

	public String getDeleteVehiculoCortesia()
	{
		return "<a href='#' class='eliminar' id='getDeleteVehiculoCortesia" + this.getId() + "'>&#160;&#160;&#160;&#160;</a>";
	}	
	public String getEditVehiculoCortesia()
	{
		return "<a href='#' class='edicion' id='getEditVehiculoCortesia" + this.getId() + "'>&#160;&#160;&#160;&#160;</a>";
	}	
	 /*
	  * Bittor Gorostegi 2/05/2006
	  * Esta invocación realiza el cambio de estado de los vehículos de cortesía
	  * actualmente se realiza ya por triggers en la BBDD

	public void comprobarEstadoVehiculoCortesia()
	{
		Criteria c=new Criteria();
		String vacio=null;
		c.add(PrestamoPeer.FECHA_FIN, (Object) vacio, Criteria.ISNULL);
		try {
			if (VehiculoCortesiaManager.getVehiculoCortesia(this.getId()).getPrestamos(c).isEmpty())
			{
				this.setEstado(0);
			}
			else
			{
				this.setEstado(1);
			}
			this.save();
		} catch (TorqueException e) {
			e.printStackTrace();
			logger.info("Ha habido un error al comprobar el estado del vehículo");
		} catch (Exception e) {
			e.printStackTrace();
		}
		
	}
	*/
}
