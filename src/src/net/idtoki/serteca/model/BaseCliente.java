package net.idtoki.serteca.model;


import java.math.BigDecimal;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;

import net.zylk.tools.ajax.AjaxUtils;

import org.apache.commons.lang.ObjectUtils;
import org.apache.torque.TorqueException;
import org.apache.torque.om.BaseObject;
import org.apache.torque.om.ComboKey;
import org.apache.torque.om.DateKey;
import org.apache.torque.om.NumberKey;
import org.apache.torque.om.ObjectKey;
import org.apache.torque.om.SimpleKey;
import org.apache.torque.om.StringKey;
import org.apache.torque.om.Persistent;
import org.apache.torque.util.Criteria;
import org.apache.torque.util.Transaction;

  
    
  
/**
 * This class was autogenerated by Torque on:
 *
 * [Mon Jul 03 11:03:24 CEST 2006]
 *
 * You should not use this class directly.  It should not even be
 * extended all references should be to Cliente
 */
public abstract class BaseCliente extends BaseObject
{
    /** The Peer class */
    private static final ClientePeer peer =
        new ClientePeer();

                                            
    /** The value for the id field */
    private int id = -1;
                                                
    /** The value for the nombre field */
    private String nombre = "";
                                                
    /** The value for the nombreComercial field */
    private String nombreComercial = "";
                                                
    /** The value for the razonSocial field */
    private String razonSocial = "";
                                                
    /** The value for the nif field */
    private String nif = "";
      
    /** The value for the direccion field */
    private String direccion;
                                          
    /** The value for the localidadId field */
    private int localidadId = -1;
      
    /** The value for the cp field */
    private String cp;
      
    /** The value for the tlfno field */
    private String tlfno;
      
    /** The value for the movil field */
    private String movil;
      
    /** The value for the fax field */
    private String fax;
      
    /** The value for the email field */
    private String email;
                                          
    /** The value for the formaPagoId field */
    private int formaPagoId = -1;
                                                
    /** The value for the numeroCuenta field */
    private String numeroCuenta = "00000000000000000000";
                                          
    /** The value for the dtoProntoPago field */
    private int dtoProntoPago = 0;
                                          
    /** The value for the diaPago field */
    private int diaPago = 15;
      
    /** The value for the obs field */
    private String obs;
  
    
    /**
     * Get the Id
     *
     * @return int
     */
    public int getId()
    {
        return id;
    }

                                              
    /**
     * Set the value of Id
     *
     * @param v new value
     */
    public void setId(int v) throws TorqueException
    {
    
                  if (this.id != v)
              {
            this.id = v;
            setModified(true);
        }
    
          
                                  
                                                    
                                }
  
    /**
     * Get the Nombre
     *
     * @return String
     */
    public String getNombre()
    {
        return nombre;
    }

                        
    /**
     * Set the value of Nombre
     *
     * @param v new value
     */
    public void setNombre(String v) 
    {
    
                  if (!ObjectUtils.equals(this.nombre, v))
              {
            this.nombre = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the NombreComercial
     *
     * @return String
     */
    public String getNombreComercial()
    {
        return nombreComercial;
    }

                        
    /**
     * Set the value of NombreComercial
     *
     * @param v new value
     */
    public void setNombreComercial(String v) 
    {
    
                  if (!ObjectUtils.equals(this.nombreComercial, v))
              {
            this.nombreComercial = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the RazonSocial
     *
     * @return String
     */
    public String getRazonSocial()
    {
        return razonSocial;
    }

                        
    /**
     * Set the value of RazonSocial
     *
     * @param v new value
     */
    public void setRazonSocial(String v) 
    {
    
                  if (!ObjectUtils.equals(this.razonSocial, v))
              {
            this.razonSocial = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Nif
     *
     * @return String
     */
    public String getNif()
    {
        return nif;
    }

                        
    /**
     * Set the value of Nif
     *
     * @param v new value
     */
    public void setNif(String v) 
    {
    
                  if (!ObjectUtils.equals(this.nif, v))
              {
            this.nif = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Direccion
     *
     * @return String
     */
    public String getDireccion()
    {
        return direccion;
    }

                        
    /**
     * Set the value of Direccion
     *
     * @param v new value
     */
    public void setDireccion(String v) 
    {
    
                  if (!ObjectUtils.equals(this.direccion, v))
              {
            this.direccion = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the LocalidadId
     *
     * @return int
     */
    public int getLocalidadId()
    {
        return localidadId;
    }

                              
    /**
     * Set the value of LocalidadId
     *
     * @param v new value
     */
    public void setLocalidadId(int v) throws TorqueException
    {
    
                  if (this.localidadId != v)
              {
            this.localidadId = v;
            setModified(true);
        }
    
                          
                if (aLocalidad != null && !(aLocalidad.getId() == v))
                {
            aLocalidad = null;
        }
      
              }
  
    /**
     * Get the Cp
     *
     * @return String
     */
    public String getCp()
    {
        return cp;
    }

                        
    /**
     * Set the value of Cp
     *
     * @param v new value
     */
    public void setCp(String v) 
    {
    
                  if (!ObjectUtils.equals(this.cp, v))
              {
            this.cp = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Tlfno
     *
     * @return String
     */
    public String getTlfno()
    {
        return tlfno;
    }

                        
    /**
     * Set the value of Tlfno
     *
     * @param v new value
     */
    public void setTlfno(String v) 
    {
    
                  if (!ObjectUtils.equals(this.tlfno, v))
              {
            this.tlfno = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Movil
     *
     * @return String
     */
    public String getMovil()
    {
        return movil;
    }

                        
    /**
     * Set the value of Movil
     *
     * @param v new value
     */
    public void setMovil(String v) 
    {
    
                  if (!ObjectUtils.equals(this.movil, v))
              {
            this.movil = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Fax
     *
     * @return String
     */
    public String getFax()
    {
        return fax;
    }

                        
    /**
     * Set the value of Fax
     *
     * @param v new value
     */
    public void setFax(String v) 
    {
    
                  if (!ObjectUtils.equals(this.fax, v))
              {
            this.fax = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Email
     *
     * @return String
     */
    public String getEmail()
    {
        return email;
    }

                        
    /**
     * Set the value of Email
     *
     * @param v new value
     */
    public void setEmail(String v) 
    {
    
                  if (!ObjectUtils.equals(this.email, v))
              {
            this.email = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the FormaPagoId
     *
     * @return int
     */
    public int getFormaPagoId()
    {
        return formaPagoId;
    }

                              
    /**
     * Set the value of FormaPagoId
     *
     * @param v new value
     */
    public void setFormaPagoId(int v) throws TorqueException
    {
    
                  if (this.formaPagoId != v)
              {
            this.formaPagoId = v;
            setModified(true);
        }
    
                          
                if (aFormaPago != null && !(aFormaPago.getId() == v))
                {
            aFormaPago = null;
        }
      
              }
  
    /**
     * Get the NumeroCuenta
     *
     * @return String
     */
    public String getNumeroCuenta()
    {
        return numeroCuenta;
    }

                        
    /**
     * Set the value of NumeroCuenta
     *
     * @param v new value
     */
    public void setNumeroCuenta(String v) 
    {
    
                  if (!ObjectUtils.equals(this.numeroCuenta, v))
              {
            this.numeroCuenta = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the DtoProntoPago
     *
     * @return int
     */
    public int getDtoProntoPago()
    {
        return dtoProntoPago;
    }

                        
    /**
     * Set the value of DtoProntoPago
     *
     * @param v new value
     */
    public void setDtoProntoPago(int v) 
    {
    
                  if (this.dtoProntoPago != v)
              {
            this.dtoProntoPago = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the DiaPago
     *
     * @return int
     */
    public int getDiaPago()
    {
        return diaPago;
    }

                        
    /**
     * Set the value of DiaPago
     *
     * @param v new value
     */
    public void setDiaPago(int v) 
    {
    
                  if (this.diaPago != v)
              {
            this.diaPago = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Obs
     *
     * @return String
     */
    public String getObs()
    {
        return obs;
    }

                        
    /**
     * Set the value of Obs
     *
     * @param v new value
     */
    public void setObs(String v) 
    {
    
                  if (!ObjectUtils.equals(this.obs, v))
              {
            this.obs = v;
            setModified(true);
        }
    
          
              }
  
      
    
                  
    
        private Localidad aLocalidad;

    /**
     * Declares an association between this object and a Localidad object
     *
     * @param v Localidad
     * @throws TorqueException
     */
    public void setLocalidad(Localidad v) throws TorqueException
    {
            if (v == null)
        {
                          setLocalidadId( -1);
              }
        else
        {
            setLocalidadId(v.getId());
        }
            aLocalidad = v;
    }

                                            
    /**
     * Get the associated Localidad object
     *
     * @return the associated Localidad object
     * @throws TorqueException
     */
    public Localidad getLocalidad() throws TorqueException
    {
        if (aLocalidad == null && (this.localidadId != 0))
        {
                          aLocalidad = LocalidadPeer.retrieveByPK(SimpleKey.keyFor(this.localidadId));
              
            /* The following can be used instead of the line above to
               guarantee the related object contains a reference
               to this object, but this level of coupling
               may be undesirable in many circumstances.
               As it can lead to a db query with many results that may
               never be used.
               Localidad obj = LocalidadPeer.retrieveByPK(this.localidadId);
               obj.addClientes(this);
            */
        }
        return aLocalidad;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey, for example
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
         */
    public void setLocalidadKey(ObjectKey key) throws TorqueException
    {
      
                        setLocalidadId(((NumberKey) key).intValue());
                  }
    
    
                  
    
        private FormaPago aFormaPago;

    /**
     * Declares an association between this object and a FormaPago object
     *
     * @param v FormaPago
     * @throws TorqueException
     */
    public void setFormaPago(FormaPago v) throws TorqueException
    {
            if (v == null)
        {
                          setFormaPagoId( -1);
              }
        else
        {
            setFormaPagoId(v.getId());
        }
            aFormaPago = v;
    }

                                            
    /**
     * Get the associated FormaPago object
     *
     * @return the associated FormaPago object
     * @throws TorqueException
     */
    public FormaPago getFormaPago() throws TorqueException
    {
        if (aFormaPago == null && (this.formaPagoId != 0))
        {
                          aFormaPago = FormaPagoPeer.retrieveByPK(SimpleKey.keyFor(this.formaPagoId));
              
            /* The following can be used instead of the line above to
               guarantee the related object contains a reference
               to this object, but this level of coupling
               may be undesirable in many circumstances.
               As it can lead to a db query with many results that may
               never be used.
               FormaPago obj = FormaPagoPeer.retrieveByPK(this.formaPagoId);
               obj.addClientes(this);
            */
        }
        return aFormaPago;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey, for example
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
         */
    public void setFormaPagoKey(ObjectKey key) throws TorqueException
    {
      
                        setFormaPagoId(((NumberKey) key).intValue());
                  }
       
                                
            
      
    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getVehiculos(new Criteria())
     *
     * @throws TorqueException
     */
    public List getVehiculos() throws TorqueException
    {
                  return getVehiculos(new Criteria(10));
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Cliente has previously
     * been saved, it will retrieve related Vehiculos from storage.
     * If this Cliente is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getVehiculos(Criteria criteria) throws TorqueException
    {
                            criteria.add(VehiculoPeer.CLIENTE_ID, getId());
                            return VehiculoPeer.doSelect(criteria);
          }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getVehiculos(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getVehiculos(Connection con) throws TorqueException
    {
                  return getVehiculos(new Criteria(10), con);
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Cliente has previously
     * been saved, it will retrieve related Vehiculos from storage.
     * If this Cliente is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getVehiculos(Criteria criteria, Connection con)
            throws TorqueException
    {
                             criteria.add(VehiculoPeer.CLIENTE_ID, getId());
                             return VehiculoPeer.doSelect(criteria, con);
           }

                        
              
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Cliente is new, it will return
     * an empty collection; or if this Cliente has previously
     * been saved, it will retrieve related Vehiculos from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Cliente.
     */
    protected List getVehiculosJoinModelo(Criteria criteria)
        throws TorqueException
    {
            
                        criteria.add(VehiculoPeer.CLIENTE_ID, getId());
                                    return VehiculoPeer.doSelectJoinModelo(criteria);
                }
                  
                    
                              
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Cliente is new, it will return
     * an empty collection; or if this Cliente has previously
     * been saved, it will retrieve related Vehiculos from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Cliente.
     */
    protected List getVehiculosJoinCliente(Criteria criteria)
        throws TorqueException
    {
            
                        criteria.add(VehiculoPeer.CLIENTE_ID, getId());
                                    return VehiculoPeer.doSelectJoinCliente(criteria);
                }
                            


                          
            
      
    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getFacturass(new Criteria())
     *
     * @throws TorqueException
     */
    public List getFacturass() throws TorqueException
    {
                  return getFacturass(new Criteria(10));
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Cliente has previously
     * been saved, it will retrieve related Facturass from storage.
     * If this Cliente is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getFacturass(Criteria criteria) throws TorqueException
    {
                            criteria.add(FacturasPeer.CLIENTE_ID, getId());
                            return FacturasPeer.doSelect(criteria);
          }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getFacturass(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getFacturass(Connection con) throws TorqueException
    {
                  return getFacturass(new Criteria(10), con);
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Cliente has previously
     * been saved, it will retrieve related Facturass from storage.
     * If this Cliente is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getFacturass(Criteria criteria, Connection con)
            throws TorqueException
    {
                             criteria.add(FacturasPeer.CLIENTE_ID, getId());
                             return FacturasPeer.doSelect(criteria, con);
           }

                        
              
                    
                              
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Cliente is new, it will return
     * an empty collection; or if this Cliente has previously
     * been saved, it will retrieve related Facturass from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Cliente.
     */
    protected List getFacturassJoinCliente(Criteria criteria)
        throws TorqueException
    {
            
                        criteria.add(FacturasPeer.CLIENTE_ID, getId());
                                    return FacturasPeer.doSelectJoinCliente(criteria);
                }
                  
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Cliente is new, it will return
     * an empty collection; or if this Cliente has previously
     * been saved, it will retrieve related Facturass from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Cliente.
     */
    protected List getFacturassJoinReparacion(Criteria criteria)
        throws TorqueException
    {
            
                        criteria.add(FacturasPeer.CLIENTE_ID, getId());
                                    return FacturasPeer.doSelectJoinReparacion(criteria);
                }
                            


          
    private static List fieldNames = null;

    /**
     * Generate a list of field names.
     *
     * @return a list of field names
     */
    public static synchronized List getFieldNames()
    {
        if (fieldNames == null)
        {
            fieldNames = new ArrayList();
              fieldNames.add("Id");
              fieldNames.add("Nombre");
              fieldNames.add("NombreComercial");
              fieldNames.add("RazonSocial");
              fieldNames.add("Nif");
              fieldNames.add("Direccion");
              fieldNames.add("LocalidadId");
              fieldNames.add("Cp");
              fieldNames.add("Tlfno");
              fieldNames.add("Movil");
              fieldNames.add("Fax");
              fieldNames.add("Email");
              fieldNames.add("FormaPagoId");
              fieldNames.add("NumeroCuenta");
              fieldNames.add("DtoProntoPago");
              fieldNames.add("DiaPago");
              fieldNames.add("Obs");
              fieldNames = Collections.unmodifiableList(fieldNames);
        }
        return fieldNames;
    }

    /**
     * Retrieves a field from the object by name passed in as a String.
     *
     * @param name field name
     * @return value
     */
    public Object getByName(String name)
    {
          if (name.equals("Id"))
        {
                return new Integer(getId());
            }
          if (name.equals("Nombre"))
        {
                return getNombre();
            }
          if (name.equals("NombreComercial"))
        {
                return getNombreComercial();
            }
          if (name.equals("RazonSocial"))
        {
                return getRazonSocial();
            }
          if (name.equals("Nif"))
        {
                return getNif();
            }
          if (name.equals("Direccion"))
        {
                return getDireccion();
            }
          if (name.equals("LocalidadId"))
        {
                return new Integer(getLocalidadId());
            }
          if (name.equals("Cp"))
        {
                return getCp();
            }
          if (name.equals("Tlfno"))
        {
                return getTlfno();
            }
          if (name.equals("Movil"))
        {
                return getMovil();
            }
          if (name.equals("Fax"))
        {
                return getFax();
            }
          if (name.equals("Email"))
        {
                return getEmail();
            }
          if (name.equals("FormaPagoId"))
        {
                return new Integer(getFormaPagoId());
            }
          if (name.equals("NumeroCuenta"))
        {
                return getNumeroCuenta();
            }
          if (name.equals("DtoProntoPago"))
        {
                return new Integer(getDtoProntoPago());
            }
          if (name.equals("DiaPago"))
        {
                return new Integer(getDiaPago());
            }
          if (name.equals("Obs"))
        {
                return getObs();
            }
          return null;
    }

    /**
     * Retrieves a field from the object by name passed in
     * as a String.  The String must be one of the static
     * Strings defined in this Class' Peer.
     *
     * @param name peer name
     * @return value
     */
    public Object getByPeerName(String name)
    {
          if (name.equals(ClientePeer.ID))
        {
                return new Integer(getId());
            }
          if (name.equals(ClientePeer.NOMBRE))
        {
                return getNombre();
            }
          if (name.equals(ClientePeer.NOMBRECOMERCIAL))
        {
                return getNombreComercial();
            }
          if (name.equals(ClientePeer.RAZONSOCIAL))
        {
                return getRazonSocial();
            }
          if (name.equals(ClientePeer.NIF))
        {
                return getNif();
            }
          if (name.equals(ClientePeer.DIRECCION))
        {
                return getDireccion();
            }
          if (name.equals(ClientePeer.LOCALIDAD_ID))
        {
                return new Integer(getLocalidadId());
            }
          if (name.equals(ClientePeer.CP))
        {
                return getCp();
            }
          if (name.equals(ClientePeer.TELEFONO))
        {
                return getTlfno();
            }
          if (name.equals(ClientePeer.MOVIL))
        {
                return getMovil();
            }
          if (name.equals(ClientePeer.FAX))
        {
                return getFax();
            }
          if (name.equals(ClientePeer.EMAIL))
        {
                return getEmail();
            }
          if (name.equals(ClientePeer.FORMA_PAGO_ID))
        {
                return new Integer(getFormaPagoId());
            }
          if (name.equals(ClientePeer.NUMERO_CUENTA))
        {
                return getNumeroCuenta();
            }
          if (name.equals(ClientePeer.DTO_PRONTO_PAGO))
        {
                return new Integer(getDtoProntoPago());
            }
          if (name.equals(ClientePeer.DIA_PAGO))
        {
                return new Integer(getDiaPago());
            }
          if (name.equals(ClientePeer.OBSERVACION))
        {
                return getObs();
            }
          return null;
    }

    /**
     * Retrieves a field from the object by Position as specified
     * in the xml schema.  Zero-based.
     *
     * @param pos position in xml schema
     * @return value
     */
    public Object getByPosition(int pos)
    {
            if (pos == 0)
        {
                return new Integer(getId());
            }
              if (pos == 1)
        {
                return getNombre();
            }
              if (pos == 2)
        {
                return getNombreComercial();
            }
              if (pos == 3)
        {
                return getRazonSocial();
            }
              if (pos == 4)
        {
                return getNif();
            }
              if (pos == 5)
        {
                return getDireccion();
            }
              if (pos == 6)
        {
                return new Integer(getLocalidadId());
            }
              if (pos == 7)
        {
                return getCp();
            }
              if (pos == 8)
        {
                return getTlfno();
            }
              if (pos == 9)
        {
                return getMovil();
            }
              if (pos == 10)
        {
                return getFax();
            }
              if (pos == 11)
        {
                return getEmail();
            }
              if (pos == 12)
        {
                return new Integer(getFormaPagoId());
            }
              if (pos == 13)
        {
                return getNumeroCuenta();
            }
              if (pos == 14)
        {
                return new Integer(getDtoProntoPago());
            }
              if (pos == 15)
        {
                return new Integer(getDiaPago());
            }
              if (pos == 16)
        {
                return getObs();
            }
              return null;
    }
     
    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     *
     * @throws Exception
     */
    public void save() throws Exception
    {
          save(ClientePeer.getMapBuilder()
                .getDatabaseMap().getName());
      }

    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
       * Note: this code is here because the method body is
     * auto-generated conditionally and therefore needs to be
     * in this file instead of in the super class, BaseObject.
       *
     * @param dbName
     * @throws TorqueException
     */
    public void save(String dbName) throws TorqueException
    {
        Connection con = null;
          try
        {
            con = Transaction.begin(dbName);
            save(con);
            Transaction.commit(con);
        }
        catch(TorqueException e)
        {
            Transaction.safeRollback(con);
            throw e;
        }
      }

      /** flag to prevent endless save loop, if this object is referenced
        by another object which falls in this transaction. */
    private boolean alreadyInSave = false;
      /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.  This method
     * is meant to be used as part of a transaction, otherwise use
     * the save() method and the connection details will be handled
     * internally
     *
     * @param con
     * @throws TorqueException
     */
    public void save(Connection con) throws TorqueException
    {
          if (!alreadyInSave)
        {
            alreadyInSave = true;


  
            // If this object has been modified, then save it to the database.
            if (isModified())
            {
                if (isNew())
                {
                    ClientePeer.doInsert((Cliente) this, con);
                    setNew(false);
                }
                else
                {
                    ClientePeer.doUpdate((Cliente) this, con);
                }
            }

                                      
                
                                                  
                
                                  alreadyInSave = false;
        }
      }

                        
      /**
     * Set the PrimaryKey using ObjectKey.
     *
     * @param key id ObjectKey
     */
    public void setPrimaryKey(ObjectKey key)
        throws TorqueException
    {
            setId(((NumberKey) key).intValue());
        }

    /**
     * Set the PrimaryKey using a String.
     *
     * @param key
     */
    public void setPrimaryKey(String key) throws TorqueException
    {
            setId(Integer.parseInt(key));
        }

  
    /**
     * returns an id that differentiates this object from others
     * of its class.
     */
    public ObjectKey getPrimaryKey()
    {
          return SimpleKey.keyFor(getId());
      }
 

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
       * It then fills all the association collections and sets the
     * related objects to isNew=true.
       */
      public Cliente copy() throws TorqueException
    {
        return copyInto(new Cliente());
    }
  
    protected Cliente copyInto(Cliente copyObj) throws TorqueException
    {
          copyObj.setId(id);
          copyObj.setNombre(nombre);
          copyObj.setNombreComercial(nombreComercial);
          copyObj.setRazonSocial(razonSocial);
          copyObj.setNif(nif);
          copyObj.setDireccion(direccion);
          copyObj.setLocalidadId(localidadId);
          copyObj.setCp(cp);
          copyObj.setTlfno(tlfno);
          copyObj.setMovil(movil);
          copyObj.setFax(fax);
          copyObj.setEmail(email);
          copyObj.setFormaPagoId(formaPagoId);
          copyObj.setNumeroCuenta(numeroCuenta);
          copyObj.setDtoProntoPago(dtoProntoPago);
          copyObj.setDiaPago(diaPago);
          copyObj.setObs(obs);
  
                            copyObj.setId( -1);
                                                                                                            
                                      
                                                  
                            return copyObj;
    }

    /**
     * returns a peer instance associated with this om.  Since Peer classes
     * are not to have any instance attributes, this method returns the
     * same instance for all member of this class. The method could therefore
     * be static, but this would prevent one from overriding the behavior.
     */
    public ClientePeer getPeer()
    {
        return peer;
    }

    public String toString()
    {
        StringBuffer str = new StringBuffer();
        str.append("Cliente:\n");
        str.append("Id = ")
               .append(getId())
             .append("\n");
        str.append("Nombre = ")
               .append(getNombre())
             .append("\n");
        str.append("NombreComercial = ")
               .append(getNombreComercial())
             .append("\n");
        str.append("RazonSocial = ")
               .append(getRazonSocial())
             .append("\n");
        str.append("Nif = ")
               .append(getNif())
             .append("\n");
        str.append("Direccion = ")
               .append(getDireccion())
             .append("\n");
        str.append("LocalidadId = ")
               .append(getLocalidadId())
             .append("\n");
        str.append("Cp = ")
               .append(getCp())
             .append("\n");
        str.append("Tlfno = ")
               .append(getTlfno())
             .append("\n");
        str.append("Movil = ")
               .append(getMovil())
             .append("\n");
        str.append("Fax = ")
               .append(getFax())
             .append("\n");
        str.append("Email = ")
               .append(getEmail())
             .append("\n");
        str.append("FormaPagoId = ")
               .append(getFormaPagoId())
             .append("\n");
        str.append("NumeroCuenta = ")
               .append(getNumeroCuenta())
             .append("\n");
        str.append("DtoProntoPago = ")
               .append(getDtoProntoPago())
             .append("\n");
        str.append("DiaPago = ")
               .append(getDiaPago())
             .append("\n");
        str.append("Obs = ")
               .append(getObs())
             .append("\n");
        return(str.toString());
    }
    public String getComplexId()
    {
    ArrayList a = new ArrayList();
      	          a.add(Integer.toString(this.getId()));
                return  AjaxUtils.concatenateIdFields(a);
    }
}
